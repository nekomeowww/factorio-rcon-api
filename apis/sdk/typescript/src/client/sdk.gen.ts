// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-fetch';
import type { V1FactorioConsoleCommandAdminsGetData, V1FactorioConsoleCommandAdminsGetResponse, V1FactorioConsoleCommandAdminsGetError, V1FactorioConsoleCommandAlertsGetData, V1FactorioConsoleCommandAlertsGetResponse, V1FactorioConsoleCommandAlertsGetError, V1FactorioConsoleCommandBanPostData, V1FactorioConsoleCommandBanPostResponse, V1FactorioConsoleCommandBanPostError, V1FactorioConsoleCommandBansGetData, V1FactorioConsoleCommandBansGetResponse, V1FactorioConsoleCommandBansGetError, V1FactorioConsoleCommandDemotePostData, V1FactorioConsoleCommandDemotePostResponse, V1FactorioConsoleCommandDemotePostError, V1FactorioConsoleCommandEnableResearchQueuePostData, V1FactorioConsoleCommandEnableResearchQueuePostResponse, V1FactorioConsoleCommandEnableResearchQueuePostError, V1FactorioConsoleCommandEvolutionGetData, V1FactorioConsoleCommandEvolutionGetResponse, V1FactorioConsoleCommandEvolutionGetError, V1FactorioConsoleCommandIgnorePostData, V1FactorioConsoleCommandIgnorePostResponse, V1FactorioConsoleCommandIgnorePostError, V1FactorioConsoleCommandKickPostData, V1FactorioConsoleCommandKickPostResponse, V1FactorioConsoleCommandKickPostError, V1FactorioConsoleCommandMessagePostData, V1FactorioConsoleCommandMessagePostResponse, V1FactorioConsoleCommandMessagePostError, V1FactorioConsoleCommandMutePostData, V1FactorioConsoleCommandMutePostResponse, V1FactorioConsoleCommandMutePostError, V1FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostData, V1FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostResponse, V1FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostError, V1FactorioConsoleCommandMutesGetData, V1FactorioConsoleCommandMutesGetResponse, V1FactorioConsoleCommandMutesGetError, V1FactorioConsoleCommandPermissionsGetData, V1FactorioConsoleCommandPermissionsGetResponse, V1FactorioConsoleCommandPermissionsGetError, V1FactorioConsoleCommandPermissionsGroupDeleteData, V1FactorioConsoleCommandPermissionsGroupDeleteResponse, V1FactorioConsoleCommandPermissionsGroupDeleteError, V1FactorioConsoleCommandPermissionsGroupPatchData, V1FactorioConsoleCommandPermissionsGroupPatchResponse, V1FactorioConsoleCommandPermissionsGroupPatchError, V1FactorioConsoleCommandPermissionsGroupPostData, V1FactorioConsoleCommandPermissionsGroupPostResponse, V1FactorioConsoleCommandPermissionsGroupPostError, V1FactorioConsoleCommandPermissionsGroupPutData, V1FactorioConsoleCommandPermissionsGroupPutResponse, V1FactorioConsoleCommandPermissionsGroupPutError, V1FactorioConsoleCommandPermissionsGroupPlayerDeleteData, V1FactorioConsoleCommandPermissionsGroupPlayerDeleteResponse, V1FactorioConsoleCommandPermissionsGroupPlayerDeleteError, V1FactorioConsoleCommandPermissionsGroupPlayerPostData, V1FactorioConsoleCommandPermissionsGroupPlayerPostResponse, V1FactorioConsoleCommandPermissionsGroupPlayerPostError, V1FactorioConsoleCommandPermissionsGroupPlayersGetData, V1FactorioConsoleCommandPermissionsGroupPlayersGetResponse, V1FactorioConsoleCommandPermissionsGroupPlayersGetError, V1FactorioConsoleCommandPlayersGetData, V1FactorioConsoleCommandPlayersGetResponse, V1FactorioConsoleCommandPlayersGetError, V1FactorioConsoleCommandPromotePostData, V1FactorioConsoleCommandPromotePostResponse, V1FactorioConsoleCommandPromotePostError, V1FactorioConsoleCommandPurgePostData, V1FactorioConsoleCommandPurgePostResponse, V1FactorioConsoleCommandPurgePostError, V1FactorioConsoleCommandRawPostData, V1FactorioConsoleCommandRawPostResponse, V1FactorioConsoleCommandRawPostError, V1FactorioConsoleCommandResetTipsPostData, V1FactorioConsoleCommandResetTipsPostResponse, V1FactorioConsoleCommandResetTipsPostError, V1FactorioConsoleCommandSeedGetData, V1FactorioConsoleCommandSeedGetResponse, V1FactorioConsoleCommandSeedGetError, V1FactorioConsoleCommandServerSavePostData, V1FactorioConsoleCommandServerSavePostResponse, V1FactorioConsoleCommandServerSavePostError, V1FactorioConsoleCommandTimeGetData, V1FactorioConsoleCommandTimeGetResponse, V1FactorioConsoleCommandTimeGetError, V1FactorioConsoleCommandToggleActionLoggingPostData, V1FactorioConsoleCommandToggleActionLoggingPostResponse, V1FactorioConsoleCommandToggleActionLoggingPostError, V1FactorioConsoleCommandToggleHeavyModePostData, V1FactorioConsoleCommandToggleHeavyModePostResponse, V1FactorioConsoleCommandToggleHeavyModePostError, V1FactorioConsoleCommandUnbanPostData, V1FactorioConsoleCommandUnbanPostResponse, V1FactorioConsoleCommandUnbanPostError, V1FactorioConsoleCommandUnignorePostData, V1FactorioConsoleCommandUnignorePostResponse, V1FactorioConsoleCommandUnignorePostError, V1FactorioConsoleCommandUnlockShortcutBarPostData, V1FactorioConsoleCommandUnlockShortcutBarPostResponse, V1FactorioConsoleCommandUnlockShortcutBarPostError, V1FactorioConsoleCommandUnlockTipsPostData, V1FactorioConsoleCommandUnlockTipsPostResponse, V1FactorioConsoleCommandUnlockTipsPostError, V1FactorioConsoleCommandUnmutePostData, V1FactorioConsoleCommandUnmutePostResponse, V1FactorioConsoleCommandUnmutePostError, V1FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostData, V1FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostResponse, V1FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostError, V1FactorioConsoleCommandVersionGetData, V1FactorioConsoleCommandVersionGetResponse, V1FactorioConsoleCommandVersionGetError, V1FactorioConsoleCommandWhisperPostData, V1FactorioConsoleCommandWhisperPostResponse, V1FactorioConsoleCommandWhisperPostError, V1FactorioConsoleCommandWhitelistDeleteData, V1FactorioConsoleCommandWhitelistDeleteResponse, V1FactorioConsoleCommandWhitelistDeleteError, V1FactorioConsoleCommandWhitelistGetData, V1FactorioConsoleCommandWhitelistGetResponse, V1FactorioConsoleCommandWhitelistGetError, V1FactorioConsoleCommandWhitelistPatchData, V1FactorioConsoleCommandWhitelistPatchResponse, V1FactorioConsoleCommandWhitelistPatchError, V1FactorioConsoleCommandWhitelistPostData, V1FactorioConsoleCommandWhitelistPostResponse, V1FactorioConsoleCommandWhitelistPostError, V2FactorioConsoleCommandAdminsGetData, V2FactorioConsoleCommandAdminsGetResponse, V2FactorioConsoleCommandAdminsGetError, V2FactorioConsoleCommandAlertsGetData, V2FactorioConsoleCommandAlertsGetResponse, V2FactorioConsoleCommandAlertsGetError, V2FactorioConsoleCommandBanPostData, V2FactorioConsoleCommandBanPostResponse, V2FactorioConsoleCommandBanPostError, V2FactorioConsoleCommandBansGetData, V2FactorioConsoleCommandBansGetResponse, V2FactorioConsoleCommandBansGetError, V2FactorioConsoleCommandDemotePostData, V2FactorioConsoleCommandDemotePostResponse, V2FactorioConsoleCommandDemotePostError, V2FactorioConsoleCommandEnableResearchQueuePostData, V2FactorioConsoleCommandEnableResearchQueuePostResponse, V2FactorioConsoleCommandEnableResearchQueuePostError, V2FactorioConsoleCommandEvolutionGetData, V2FactorioConsoleCommandEvolutionGetResponse, V2FactorioConsoleCommandEvolutionGetError, V2FactorioConsoleCommandEvolutionSurfaceNameGetData, V2FactorioConsoleCommandEvolutionSurfaceNameGetResponse, V2FactorioConsoleCommandEvolutionSurfaceNameGetError, V2FactorioConsoleCommandIgnorePostData, V2FactorioConsoleCommandIgnorePostResponse, V2FactorioConsoleCommandIgnorePostError, V2FactorioConsoleCommandKickPostData, V2FactorioConsoleCommandKickPostResponse, V2FactorioConsoleCommandKickPostError, V2FactorioConsoleCommandMessagePostData, V2FactorioConsoleCommandMessagePostResponse, V2FactorioConsoleCommandMessagePostError, V2FactorioConsoleCommandMutePostData, V2FactorioConsoleCommandMutePostResponse, V2FactorioConsoleCommandMutePostError, V2FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostData, V2FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostResponse, V2FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostError, V2FactorioConsoleCommandMutesGetData, V2FactorioConsoleCommandMutesGetResponse, V2FactorioConsoleCommandMutesGetError, V2FactorioConsoleCommandPermissionsGetData, V2FactorioConsoleCommandPermissionsGetResponse, V2FactorioConsoleCommandPermissionsGetError, V2FactorioConsoleCommandPermissionsGroupDeleteData, V2FactorioConsoleCommandPermissionsGroupDeleteResponse, V2FactorioConsoleCommandPermissionsGroupDeleteError, V2FactorioConsoleCommandPermissionsGroupPatchData, V2FactorioConsoleCommandPermissionsGroupPatchResponse, V2FactorioConsoleCommandPermissionsGroupPatchError, V2FactorioConsoleCommandPermissionsGroupPostData, V2FactorioConsoleCommandPermissionsGroupPostResponse, V2FactorioConsoleCommandPermissionsGroupPostError, V2FactorioConsoleCommandPermissionsGroupPutData, V2FactorioConsoleCommandPermissionsGroupPutResponse, V2FactorioConsoleCommandPermissionsGroupPutError, V2FactorioConsoleCommandPermissionsGroupPlayerDeleteData, V2FactorioConsoleCommandPermissionsGroupPlayerDeleteResponse, V2FactorioConsoleCommandPermissionsGroupPlayerDeleteError, V2FactorioConsoleCommandPermissionsGroupPlayerPostData, V2FactorioConsoleCommandPermissionsGroupPlayerPostResponse, V2FactorioConsoleCommandPermissionsGroupPlayerPostError, V2FactorioConsoleCommandPermissionsGroupPlayersGetData, V2FactorioConsoleCommandPermissionsGroupPlayersGetResponse, V2FactorioConsoleCommandPermissionsGroupPlayersGetError, V2FactorioConsoleCommandPlayersGetData, V2FactorioConsoleCommandPlayersGetResponse, V2FactorioConsoleCommandPlayersGetError, V2FactorioConsoleCommandPromotePostData, V2FactorioConsoleCommandPromotePostResponse, V2FactorioConsoleCommandPromotePostError, V2FactorioConsoleCommandPurgePostData, V2FactorioConsoleCommandPurgePostResponse, V2FactorioConsoleCommandPurgePostError, V2FactorioConsoleCommandRawPostData, V2FactorioConsoleCommandRawPostResponse, V2FactorioConsoleCommandRawPostError, V2FactorioConsoleCommandResetTipsPostData, V2FactorioConsoleCommandResetTipsPostResponse, V2FactorioConsoleCommandResetTipsPostError, V2FactorioConsoleCommandSeedGetData, V2FactorioConsoleCommandSeedGetResponse, V2FactorioConsoleCommandSeedGetError, V2FactorioConsoleCommandServerSavePostData, V2FactorioConsoleCommandServerSavePostResponse, V2FactorioConsoleCommandServerSavePostError, V2FactorioConsoleCommandTimeGetData, V2FactorioConsoleCommandTimeGetResponse, V2FactorioConsoleCommandTimeGetError, V2FactorioConsoleCommandToggleActionLoggingPostData, V2FactorioConsoleCommandToggleActionLoggingPostResponse, V2FactorioConsoleCommandToggleActionLoggingPostError, V2FactorioConsoleCommandToggleHeavyModePostData, V2FactorioConsoleCommandToggleHeavyModePostResponse, V2FactorioConsoleCommandToggleHeavyModePostError, V2FactorioConsoleCommandUnbanPostData, V2FactorioConsoleCommandUnbanPostResponse, V2FactorioConsoleCommandUnbanPostError, V2FactorioConsoleCommandUnignorePostData, V2FactorioConsoleCommandUnignorePostResponse, V2FactorioConsoleCommandUnignorePostError, V2FactorioConsoleCommandUnlockShortcutBarPostData, V2FactorioConsoleCommandUnlockShortcutBarPostResponse, V2FactorioConsoleCommandUnlockShortcutBarPostError, V2FactorioConsoleCommandUnlockTipsPostData, V2FactorioConsoleCommandUnlockTipsPostResponse, V2FactorioConsoleCommandUnlockTipsPostError, V2FactorioConsoleCommandUnmutePostData, V2FactorioConsoleCommandUnmutePostResponse, V2FactorioConsoleCommandUnmutePostError, V2FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostData, V2FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostResponse, V2FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostError, V2FactorioConsoleCommandVersionGetData, V2FactorioConsoleCommandVersionGetResponse, V2FactorioConsoleCommandVersionGetError, V2FactorioConsoleCommandWhisperPostData, V2FactorioConsoleCommandWhisperPostResponse, V2FactorioConsoleCommandWhisperPostError, V2FactorioConsoleCommandWhitelistDeleteData, V2FactorioConsoleCommandWhitelistDeleteResponse, V2FactorioConsoleCommandWhitelistDeleteError, V2FactorioConsoleCommandWhitelistGetData, V2FactorioConsoleCommandWhitelistGetResponse, V2FactorioConsoleCommandWhitelistGetError, V2FactorioConsoleCommandWhitelistPatchData, V2FactorioConsoleCommandWhitelistPatchResponse, V2FactorioConsoleCommandWhitelistPatchError, V2FactorioConsoleCommandWhitelistPostData, V2FactorioConsoleCommandWhitelistPostResponse, V2FactorioConsoleCommandWhitelistPostError } from './types.gen';

export const client = createClient(createConfig());

/**
 * Get the list of admins.
 * Get the list of admins.
 */
export const v1FactorioConsoleCommandAdminsGet = <ThrowOnError extends boolean = false>(options?: Options<V1FactorioConsoleCommandAdminsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V1FactorioConsoleCommandAdminsGetResponse, V1FactorioConsoleCommandAdminsGetError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/admins',
        ...options
    });
};

/**
 * Get the list of alerts.
 * Get the list of alerts.
 */
export const v1FactorioConsoleCommandAlertsGet = <ThrowOnError extends boolean = false>(options?: Options<V1FactorioConsoleCommandAlertsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V1FactorioConsoleCommandAlertsGetResponse, V1FactorioConsoleCommandAlertsGetError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/alerts',
        ...options
    });
};

/**
 * Ban a player.
 * Ban a player.
 */
export const v1FactorioConsoleCommandBanPost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandBanPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V1FactorioConsoleCommandBanPostResponse, V1FactorioConsoleCommandBanPostError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/ban',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get the list of bans.
 * Get the list of bans.
 */
export const v1FactorioConsoleCommandBansGet = <ThrowOnError extends boolean = false>(options?: Options<V1FactorioConsoleCommandBansGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V1FactorioConsoleCommandBansGetResponse, V1FactorioConsoleCommandBansGetError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/bans',
        ...options
    });
};

/**
 * Demote a player.
 * Demote a player.
 */
export const v1FactorioConsoleCommandDemotePost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandDemotePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V1FactorioConsoleCommandDemotePostResponse, V1FactorioConsoleCommandDemotePostError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/demote',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Enable the research queue.
 * Enable the research queue.
 */
export const v1FactorioConsoleCommandEnableResearchQueuePost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandEnableResearchQueuePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V1FactorioConsoleCommandEnableResearchQueuePostResponse, V1FactorioConsoleCommandEnableResearchQueuePostError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/enable-research-queue',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get info about the alien evolution factor.
 * Get info about the alien evolution factor.
 */
export const v1FactorioConsoleCommandEvolutionGet = <ThrowOnError extends boolean = false>(options?: Options<V1FactorioConsoleCommandEvolutionGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V1FactorioConsoleCommandEvolutionGetResponse, V1FactorioConsoleCommandEvolutionGetError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/evolution',
        ...options
    });
};

/**
 * Ignore a player.
 * Ignore a player.
 */
export const v1FactorioConsoleCommandIgnorePost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandIgnorePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V1FactorioConsoleCommandIgnorePostResponse, V1FactorioConsoleCommandIgnorePostError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/ignore',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Kick a player.
 * Kick a player.
 */
export const v1FactorioConsoleCommandKickPost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandKickPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V1FactorioConsoleCommandKickPostResponse, V1FactorioConsoleCommandKickPostError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/kick',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Send a message to all players.
 * Send a message to all players.
 */
export const v1FactorioConsoleCommandMessagePost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandMessagePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V1FactorioConsoleCommandMessagePostResponse, V1FactorioConsoleCommandMessagePostError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/message',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Mute a player.
 * Mute a player.
 */
export const v1FactorioConsoleCommandMutePost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandMutePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V1FactorioConsoleCommandMutePostResponse, V1FactorioConsoleCommandMutePostError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/mute',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Mute all programmable speakers.
 * Mute all programmable speakers.
 */
export const v1FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V1FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostResponse, V1FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/mute-programmable-speaker-for-everyone',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get the list of mutes.
 * Get the list of mutes.
 */
export const v1FactorioConsoleCommandMutesGet = <ThrowOnError extends boolean = false>(options?: Options<V1FactorioConsoleCommandMutesGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V1FactorioConsoleCommandMutesGetResponse, V1FactorioConsoleCommandMutesGetError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/mutes',
        ...options
    });
};

/**
 * Get the list of permissions.
 * Get the list of permissions.
 */
export const v1FactorioConsoleCommandPermissionsGet = <ThrowOnError extends boolean = false>(options?: Options<V1FactorioConsoleCommandPermissionsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V1FactorioConsoleCommandPermissionsGetResponse, V1FactorioConsoleCommandPermissionsGetError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/permissions',
        ...options
    });
};

/**
 * Delete a group.
 * Delete a group.
 */
export const v1FactorioConsoleCommandPermissionsGroupDelete = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandPermissionsGroupDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<V1FactorioConsoleCommandPermissionsGroupDeleteResponse, V1FactorioConsoleCommandPermissionsGroupDeleteError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/permissions/group',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Edit a group.
 * Edit a group.
 */
export const v1FactorioConsoleCommandPermissionsGroupPatch = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandPermissionsGroupPatchData, ThrowOnError>) => {
    return (options?.client ?? client).patch<V1FactorioConsoleCommandPermissionsGroupPatchResponse, V1FactorioConsoleCommandPermissionsGroupPatchError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/permissions/group',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create a group.
 * Create a group.
 */
export const v1FactorioConsoleCommandPermissionsGroupPost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandPermissionsGroupPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V1FactorioConsoleCommandPermissionsGroupPostResponse, V1FactorioConsoleCommandPermissionsGroupPostError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/permissions/group',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Rename a group.
 * Rename a group.
 */
export const v1FactorioConsoleCommandPermissionsGroupPut = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandPermissionsGroupPutData, ThrowOnError>) => {
    return (options?.client ?? client).put<V1FactorioConsoleCommandPermissionsGroupPutResponse, V1FactorioConsoleCommandPermissionsGroupPutError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/permissions/group',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Remove a player from a group.
 * Remove a player from a group.
 */
export const v1FactorioConsoleCommandPermissionsGroupPlayerDelete = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandPermissionsGroupPlayerDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<V1FactorioConsoleCommandPermissionsGroupPlayerDeleteResponse, V1FactorioConsoleCommandPermissionsGroupPlayerDeleteError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/permissions/group/player',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Add a player to a group.
 * Add a player to a group.
 */
export const v1FactorioConsoleCommandPermissionsGroupPlayerPost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandPermissionsGroupPlayerPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V1FactorioConsoleCommandPermissionsGroupPlayerPostResponse, V1FactorioConsoleCommandPermissionsGroupPlayerPostError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/permissions/group/player',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get the groups for a player.
 * Get the groups for a player.
 */
export const v1FactorioConsoleCommandPermissionsGroupPlayersGet = <ThrowOnError extends boolean = false>(options?: Options<V1FactorioConsoleCommandPermissionsGroupPlayersGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V1FactorioConsoleCommandPermissionsGroupPlayersGetResponse, V1FactorioConsoleCommandPermissionsGroupPlayersGetError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/permissions/group/players',
        ...options
    });
};

/**
 * Get the list of players.
 * Get the list of players.
 */
export const v1FactorioConsoleCommandPlayersGet = <ThrowOnError extends boolean = false>(options?: Options<V1FactorioConsoleCommandPlayersGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V1FactorioConsoleCommandPlayersGetResponse, V1FactorioConsoleCommandPlayersGetError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/players',
        ...options
    });
};

/**
 * Promote a player.
 * Promote a player.
 */
export const v1FactorioConsoleCommandPromotePost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandPromotePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V1FactorioConsoleCommandPromotePostResponse, V1FactorioConsoleCommandPromotePostError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/promote',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Purge a player.
 * Purge a player.
 */
export const v1FactorioConsoleCommandPurgePost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandPurgePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V1FactorioConsoleCommandPurgePostResponse, V1FactorioConsoleCommandPurgePostError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/purge',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Executes a Lua command (if allowed).
 * Executes a Lua command (if allowed).
 */
export const v1FactorioConsoleCommandRawPost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandRawPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V1FactorioConsoleCommandRawPostResponse, V1FactorioConsoleCommandRawPostError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/raw',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Reset the tips.
 * Reset the tips.
 */
export const v1FactorioConsoleCommandResetTipsPost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandResetTipsPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V1FactorioConsoleCommandResetTipsPostResponse, V1FactorioConsoleCommandResetTipsPostError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/reset-tips',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get the map seed.
 * Get the map seed.
 */
export const v1FactorioConsoleCommandSeedGet = <ThrowOnError extends boolean = false>(options?: Options<V1FactorioConsoleCommandSeedGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V1FactorioConsoleCommandSeedGetResponse, V1FactorioConsoleCommandSeedGetError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/seed',
        ...options
    });
};

/**
 * Save the game.
 * Save the game.
 */
export const v1FactorioConsoleCommandServerSavePost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandServerSavePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V1FactorioConsoleCommandServerSavePostResponse, V1FactorioConsoleCommandServerSavePostError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/server-save',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get the current game time.
 * Get the current game time.
 */
export const v1FactorioConsoleCommandTimeGet = <ThrowOnError extends boolean = false>(options?: Options<V1FactorioConsoleCommandTimeGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V1FactorioConsoleCommandTimeGetResponse, V1FactorioConsoleCommandTimeGetError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/time',
        ...options
    });
};

/**
 * Toggle the action logging.
 * Toggle the action logging.
 */
export const v1FactorioConsoleCommandToggleActionLoggingPost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandToggleActionLoggingPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V1FactorioConsoleCommandToggleActionLoggingPostResponse, V1FactorioConsoleCommandToggleActionLoggingPostError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/toggle-action-logging',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Toggle the heavy mode.
 * Toggle the heavy mode.
 */
export const v1FactorioConsoleCommandToggleHeavyModePost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandToggleHeavyModePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V1FactorioConsoleCommandToggleHeavyModePostResponse, V1FactorioConsoleCommandToggleHeavyModePostError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/toggle-heavy-mode',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Unban a player.
 * Unban a player.
 */
export const v1FactorioConsoleCommandUnbanPost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandUnbanPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V1FactorioConsoleCommandUnbanPostResponse, V1FactorioConsoleCommandUnbanPostError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/unban',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Unignore a player.
 * Unignore a player.
 */
export const v1FactorioConsoleCommandUnignorePost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandUnignorePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V1FactorioConsoleCommandUnignorePostResponse, V1FactorioConsoleCommandUnignorePostError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/unignore',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Unlock the shortcut bar.
 * Unlock the shortcut bar.
 */
export const v1FactorioConsoleCommandUnlockShortcutBarPost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandUnlockShortcutBarPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V1FactorioConsoleCommandUnlockShortcutBarPostResponse, V1FactorioConsoleCommandUnlockShortcutBarPostError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/unlock-shortcut-bar',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Unlock the tips.
 * Unlock the tips.
 */
export const v1FactorioConsoleCommandUnlockTipsPost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandUnlockTipsPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V1FactorioConsoleCommandUnlockTipsPostResponse, V1FactorioConsoleCommandUnlockTipsPostError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/unlock-tips',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Unmute a player.
 * Unmute a player.
 */
export const v1FactorioConsoleCommandUnmutePost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandUnmutePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V1FactorioConsoleCommandUnmutePostResponse, V1FactorioConsoleCommandUnmutePostError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/unmute',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Unmute all programmable speakers.
 * Unmute all programmable speakers.
 */
export const v1FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V1FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostResponse, V1FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/unmute-programmable-speaker-for-everyone',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get the version of the current Factorio game server.
 * Get the version of the current Factorio game server.
 */
export const v1FactorioConsoleCommandVersionGet = <ThrowOnError extends boolean = false>(options?: Options<V1FactorioConsoleCommandVersionGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V1FactorioConsoleCommandVersionGetResponse, V1FactorioConsoleCommandVersionGetError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/version',
        ...options
    });
};

/**
 * Whisper a message.
 * Whisper a message.
 */
export const v1FactorioConsoleCommandWhisperPost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandWhisperPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V1FactorioConsoleCommandWhisperPostResponse, V1FactorioConsoleCommandWhisperPostError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/whisper',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Clear the whitelist.
 * Clear the whitelist.
 */
export const v1FactorioConsoleCommandWhitelistDelete = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandWhitelistDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<V1FactorioConsoleCommandWhitelistDeleteResponse, V1FactorioConsoleCommandWhitelistDeleteError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/whitelist',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get the list of whitelist.
 * Get the list of whitelist.
 */
export const v1FactorioConsoleCommandWhitelistGet = <ThrowOnError extends boolean = false>(options?: Options<V1FactorioConsoleCommandWhitelistGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V1FactorioConsoleCommandWhitelistGetResponse, V1FactorioConsoleCommandWhitelistGetError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/whitelist',
        ...options
    });
};

/**
 * Remove a player from the whitelist.
 * Remove a player from the whitelist.
 */
export const v1FactorioConsoleCommandWhitelistPatch = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandWhitelistPatchData, ThrowOnError>) => {
    return (options?.client ?? client).patch<V1FactorioConsoleCommandWhitelistPatchResponse, V1FactorioConsoleCommandWhitelistPatchError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/whitelist',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Add a player to the whitelist.
 * Add a player to the whitelist.
 */
export const v1FactorioConsoleCommandWhitelistPost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandWhitelistPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V1FactorioConsoleCommandWhitelistPostResponse, V1FactorioConsoleCommandWhitelistPostError, ThrowOnError>({
        url: '/api/v1/factorio/console/command/whitelist',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get the list of admins.
 * Get the list of admins.
 */
export const v2FactorioConsoleCommandAdminsGet = <ThrowOnError extends boolean = false>(options?: Options<V2FactorioConsoleCommandAdminsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V2FactorioConsoleCommandAdminsGetResponse, V2FactorioConsoleCommandAdminsGetError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/admins',
        ...options
    });
};

/**
 * Get the list of alerts.
 * Get the list of alerts.
 */
export const v2FactorioConsoleCommandAlertsGet = <ThrowOnError extends boolean = false>(options?: Options<V2FactorioConsoleCommandAlertsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V2FactorioConsoleCommandAlertsGetResponse, V2FactorioConsoleCommandAlertsGetError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/alerts',
        ...options
    });
};

/**
 * Ban a player.
 * Ban a player.
 */
export const v2FactorioConsoleCommandBanPost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandBanPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V2FactorioConsoleCommandBanPostResponse, V2FactorioConsoleCommandBanPostError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/ban',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get the list of bans.
 * Get the list of bans.
 */
export const v2FactorioConsoleCommandBansGet = <ThrowOnError extends boolean = false>(options?: Options<V2FactorioConsoleCommandBansGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V2FactorioConsoleCommandBansGetResponse, V2FactorioConsoleCommandBansGetError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/bans',
        ...options
    });
};

/**
 * Demote a player.
 * Demote a player.
 */
export const v2FactorioConsoleCommandDemotePost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandDemotePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V2FactorioConsoleCommandDemotePostResponse, V2FactorioConsoleCommandDemotePostError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/demote',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Enable the research queue.
 * Enable the research queue.
 */
export const v2FactorioConsoleCommandEnableResearchQueuePost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandEnableResearchQueuePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V2FactorioConsoleCommandEnableResearchQueuePostResponse, V2FactorioConsoleCommandEnableResearchQueuePostError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/enable-research-queue',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get info about the alien evolution factor.
 * Get info about the alien evolution factor.
 */
export const v2FactorioConsoleCommandEvolutionGet = <ThrowOnError extends boolean = false>(options?: Options<V2FactorioConsoleCommandEvolutionGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V2FactorioConsoleCommandEvolutionGetResponse, V2FactorioConsoleCommandEvolutionGetError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/evolution',
        ...options
    });
};

/**
 * Alien evolution factor by surface name.
 * Get info about the alien evolution factor by sepecific surface name. Equavalent to `/evolution <surface_name>` command in Factorio.
 */
export const v2FactorioConsoleCommandEvolutionSurfaceNameGet = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandEvolutionSurfaceNameGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V2FactorioConsoleCommandEvolutionSurfaceNameGetResponse, V2FactorioConsoleCommandEvolutionSurfaceNameGetError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/evolution/{surfaceName}',
        ...options
    });
};

/**
 * Ignore a player.
 * Ignore a player.
 */
export const v2FactorioConsoleCommandIgnorePost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandIgnorePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V2FactorioConsoleCommandIgnorePostResponse, V2FactorioConsoleCommandIgnorePostError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/ignore',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Kick a player.
 * Kick a player.
 */
export const v2FactorioConsoleCommandKickPost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandKickPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V2FactorioConsoleCommandKickPostResponse, V2FactorioConsoleCommandKickPostError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/kick',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Send a message to all players.
 * Send a message to all players.
 */
export const v2FactorioConsoleCommandMessagePost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandMessagePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V2FactorioConsoleCommandMessagePostResponse, V2FactorioConsoleCommandMessagePostError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/message',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Mute a player.
 * Mute a player.
 */
export const v2FactorioConsoleCommandMutePost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandMutePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V2FactorioConsoleCommandMutePostResponse, V2FactorioConsoleCommandMutePostError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/mute',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Mute all programmable speakers.
 * Mute all programmable speakers.
 */
export const v2FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V2FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostResponse, V2FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/mute-programmable-speaker-for-everyone',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get the list of mutes.
 * Get the list of mutes.
 */
export const v2FactorioConsoleCommandMutesGet = <ThrowOnError extends boolean = false>(options?: Options<V2FactorioConsoleCommandMutesGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V2FactorioConsoleCommandMutesGetResponse, V2FactorioConsoleCommandMutesGetError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/mutes',
        ...options
    });
};

/**
 * Get the list of permissions.
 * Get the list of permissions.
 */
export const v2FactorioConsoleCommandPermissionsGet = <ThrowOnError extends boolean = false>(options?: Options<V2FactorioConsoleCommandPermissionsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V2FactorioConsoleCommandPermissionsGetResponse, V2FactorioConsoleCommandPermissionsGetError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/permissions',
        ...options
    });
};

/**
 * Delete a group.
 * Delete a group.
 */
export const v2FactorioConsoleCommandPermissionsGroupDelete = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandPermissionsGroupDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<V2FactorioConsoleCommandPermissionsGroupDeleteResponse, V2FactorioConsoleCommandPermissionsGroupDeleteError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/permissions/group',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Edit a group.
 * Edit a group.
 */
export const v2FactorioConsoleCommandPermissionsGroupPatch = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandPermissionsGroupPatchData, ThrowOnError>) => {
    return (options?.client ?? client).patch<V2FactorioConsoleCommandPermissionsGroupPatchResponse, V2FactorioConsoleCommandPermissionsGroupPatchError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/permissions/group',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create a group.
 * Create a group.
 */
export const v2FactorioConsoleCommandPermissionsGroupPost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandPermissionsGroupPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V2FactorioConsoleCommandPermissionsGroupPostResponse, V2FactorioConsoleCommandPermissionsGroupPostError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/permissions/group',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Rename a group.
 * Rename a group.
 */
export const v2FactorioConsoleCommandPermissionsGroupPut = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandPermissionsGroupPutData, ThrowOnError>) => {
    return (options?.client ?? client).put<V2FactorioConsoleCommandPermissionsGroupPutResponse, V2FactorioConsoleCommandPermissionsGroupPutError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/permissions/group',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Remove a player from a group.
 * Remove a player from a group.
 */
export const v2FactorioConsoleCommandPermissionsGroupPlayerDelete = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandPermissionsGroupPlayerDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<V2FactorioConsoleCommandPermissionsGroupPlayerDeleteResponse, V2FactorioConsoleCommandPermissionsGroupPlayerDeleteError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/permissions/group/player',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Add a player to a group.
 * Add a player to a group.
 */
export const v2FactorioConsoleCommandPermissionsGroupPlayerPost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandPermissionsGroupPlayerPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V2FactorioConsoleCommandPermissionsGroupPlayerPostResponse, V2FactorioConsoleCommandPermissionsGroupPlayerPostError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/permissions/group/player',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get the groups for a player.
 * Get the groups for a player.
 */
export const v2FactorioConsoleCommandPermissionsGroupPlayersGet = <ThrowOnError extends boolean = false>(options?: Options<V2FactorioConsoleCommandPermissionsGroupPlayersGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V2FactorioConsoleCommandPermissionsGroupPlayersGetResponse, V2FactorioConsoleCommandPermissionsGroupPlayersGetError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/permissions/group/players',
        ...options
    });
};

/**
 * Get the list of players.
 * Get the list of players.
 */
export const v2FactorioConsoleCommandPlayersGet = <ThrowOnError extends boolean = false>(options?: Options<V2FactorioConsoleCommandPlayersGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V2FactorioConsoleCommandPlayersGetResponse, V2FactorioConsoleCommandPlayersGetError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/players',
        ...options
    });
};

/**
 * Promote a player.
 * Promote a player.
 */
export const v2FactorioConsoleCommandPromotePost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandPromotePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V2FactorioConsoleCommandPromotePostResponse, V2FactorioConsoleCommandPromotePostError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/promote',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Purge a player.
 * Purge a player.
 */
export const v2FactorioConsoleCommandPurgePost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandPurgePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V2FactorioConsoleCommandPurgePostResponse, V2FactorioConsoleCommandPurgePostError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/purge',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Executes a Lua command (if allowed).
 * Executes a Lua command (if allowed).
 */
export const v2FactorioConsoleCommandRawPost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandRawPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V2FactorioConsoleCommandRawPostResponse, V2FactorioConsoleCommandRawPostError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/raw',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Reset the tips.
 * Reset the tips.
 */
export const v2FactorioConsoleCommandResetTipsPost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandResetTipsPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V2FactorioConsoleCommandResetTipsPostResponse, V2FactorioConsoleCommandResetTipsPostError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/reset-tips',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get the map seed.
 * Get the map seed.
 */
export const v2FactorioConsoleCommandSeedGet = <ThrowOnError extends boolean = false>(options?: Options<V2FactorioConsoleCommandSeedGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V2FactorioConsoleCommandSeedGetResponse, V2FactorioConsoleCommandSeedGetError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/seed',
        ...options
    });
};

/**
 * Save the game.
 * Save the game.
 */
export const v2FactorioConsoleCommandServerSavePost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandServerSavePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V2FactorioConsoleCommandServerSavePostResponse, V2FactorioConsoleCommandServerSavePostError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/server-save',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get the current game time.
 * Get the current game time.
 */
export const v2FactorioConsoleCommandTimeGet = <ThrowOnError extends boolean = false>(options?: Options<V2FactorioConsoleCommandTimeGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V2FactorioConsoleCommandTimeGetResponse, V2FactorioConsoleCommandTimeGetError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/time',
        ...options
    });
};

/**
 * Toggle the action logging.
 * Toggle the action logging.
 */
export const v2FactorioConsoleCommandToggleActionLoggingPost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandToggleActionLoggingPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V2FactorioConsoleCommandToggleActionLoggingPostResponse, V2FactorioConsoleCommandToggleActionLoggingPostError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/toggle-action-logging',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Toggle the heavy mode.
 * Toggle the heavy mode.
 */
export const v2FactorioConsoleCommandToggleHeavyModePost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandToggleHeavyModePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V2FactorioConsoleCommandToggleHeavyModePostResponse, V2FactorioConsoleCommandToggleHeavyModePostError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/toggle-heavy-mode',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Unban a player.
 * Unban a player.
 */
export const v2FactorioConsoleCommandUnbanPost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandUnbanPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V2FactorioConsoleCommandUnbanPostResponse, V2FactorioConsoleCommandUnbanPostError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/unban',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Unignore a player.
 * Unignore a player.
 */
export const v2FactorioConsoleCommandUnignorePost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandUnignorePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V2FactorioConsoleCommandUnignorePostResponse, V2FactorioConsoleCommandUnignorePostError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/unignore',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Unlock the shortcut bar.
 * Unlock the shortcut bar.
 */
export const v2FactorioConsoleCommandUnlockShortcutBarPost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandUnlockShortcutBarPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V2FactorioConsoleCommandUnlockShortcutBarPostResponse, V2FactorioConsoleCommandUnlockShortcutBarPostError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/unlock-shortcut-bar',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Unlock the tips.
 * Unlock the tips.
 */
export const v2FactorioConsoleCommandUnlockTipsPost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandUnlockTipsPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V2FactorioConsoleCommandUnlockTipsPostResponse, V2FactorioConsoleCommandUnlockTipsPostError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/unlock-tips',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Unmute a player.
 * Unmute a player.
 */
export const v2FactorioConsoleCommandUnmutePost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandUnmutePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V2FactorioConsoleCommandUnmutePostResponse, V2FactorioConsoleCommandUnmutePostError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/unmute',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Unmute all programmable speakers.
 * Unmute all programmable speakers.
 */
export const v2FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V2FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostResponse, V2FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/unmute-programmable-speaker-for-everyone',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get the version of the current Factorio game server.
 * Get the version of the current Factorio game server.
 */
export const v2FactorioConsoleCommandVersionGet = <ThrowOnError extends boolean = false>(options?: Options<V2FactorioConsoleCommandVersionGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V2FactorioConsoleCommandVersionGetResponse, V2FactorioConsoleCommandVersionGetError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/version',
        ...options
    });
};

/**
 * Whisper a message.
 * Whisper a message.
 */
export const v2FactorioConsoleCommandWhisperPost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandWhisperPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V2FactorioConsoleCommandWhisperPostResponse, V2FactorioConsoleCommandWhisperPostError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/whisper',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Clear the whitelist.
 * Clear the whitelist.
 */
export const v2FactorioConsoleCommandWhitelistDelete = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandWhitelistDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<V2FactorioConsoleCommandWhitelistDeleteResponse, V2FactorioConsoleCommandWhitelistDeleteError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/whitelist',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get the list of whitelist.
 * Get the list of whitelist.
 */
export const v2FactorioConsoleCommandWhitelistGet = <ThrowOnError extends boolean = false>(options?: Options<V2FactorioConsoleCommandWhitelistGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V2FactorioConsoleCommandWhitelistGetResponse, V2FactorioConsoleCommandWhitelistGetError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/whitelist',
        ...options
    });
};

/**
 * Remove a player from the whitelist.
 * Remove a player from the whitelist.
 */
export const v2FactorioConsoleCommandWhitelistPatch = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandWhitelistPatchData, ThrowOnError>) => {
    return (options?.client ?? client).patch<V2FactorioConsoleCommandWhitelistPatchResponse, V2FactorioConsoleCommandWhitelistPatchError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/whitelist',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Add a player to the whitelist.
 * Add a player to the whitelist.
 */
export const v2FactorioConsoleCommandWhitelistPost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandWhitelistPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<V2FactorioConsoleCommandWhitelistPostResponse, V2FactorioConsoleCommandWhitelistPostError, ThrowOnError>({
        url: '/api/v2/factorio/console/command/whitelist',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};