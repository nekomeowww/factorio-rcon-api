// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { V1FactorioConsoleCommandAdminsGetData, V1FactorioConsoleCommandAdminsGetErrors, V1FactorioConsoleCommandAdminsGetResponses, V1FactorioConsoleCommandAlertsGetData, V1FactorioConsoleCommandAlertsGetErrors, V1FactorioConsoleCommandAlertsGetResponses, V1FactorioConsoleCommandBanPostData, V1FactorioConsoleCommandBanPostErrors, V1FactorioConsoleCommandBanPostResponses, V1FactorioConsoleCommandBansGetData, V1FactorioConsoleCommandBansGetErrors, V1FactorioConsoleCommandBansGetResponses, V1FactorioConsoleCommandDemotePostData, V1FactorioConsoleCommandDemotePostErrors, V1FactorioConsoleCommandDemotePostResponses, V1FactorioConsoleCommandEnableResearchQueuePostData, V1FactorioConsoleCommandEnableResearchQueuePostErrors, V1FactorioConsoleCommandEnableResearchQueuePostResponses, V1FactorioConsoleCommandEvolutionGetData, V1FactorioConsoleCommandEvolutionGetErrors, V1FactorioConsoleCommandEvolutionGetResponses, V1FactorioConsoleCommandIgnorePostData, V1FactorioConsoleCommandIgnorePostErrors, V1FactorioConsoleCommandIgnorePostResponses, V1FactorioConsoleCommandKickPostData, V1FactorioConsoleCommandKickPostErrors, V1FactorioConsoleCommandKickPostResponses, V1FactorioConsoleCommandMessagePostData, V1FactorioConsoleCommandMessagePostErrors, V1FactorioConsoleCommandMessagePostResponses, V1FactorioConsoleCommandMutePostData, V1FactorioConsoleCommandMutePostErrors, V1FactorioConsoleCommandMutePostResponses, V1FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostData, V1FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostErrors, V1FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostResponses, V1FactorioConsoleCommandMutesGetData, V1FactorioConsoleCommandMutesGetErrors, V1FactorioConsoleCommandMutesGetResponses, V1FactorioConsoleCommandPermissionsGetData, V1FactorioConsoleCommandPermissionsGetErrors, V1FactorioConsoleCommandPermissionsGetResponses, V1FactorioConsoleCommandPermissionsGroupDeleteData, V1FactorioConsoleCommandPermissionsGroupDeleteErrors, V1FactorioConsoleCommandPermissionsGroupDeleteResponses, V1FactorioConsoleCommandPermissionsGroupPatchData, V1FactorioConsoleCommandPermissionsGroupPatchErrors, V1FactorioConsoleCommandPermissionsGroupPatchResponses, V1FactorioConsoleCommandPermissionsGroupPlayerDeleteData, V1FactorioConsoleCommandPermissionsGroupPlayerDeleteErrors, V1FactorioConsoleCommandPermissionsGroupPlayerDeleteResponses, V1FactorioConsoleCommandPermissionsGroupPlayerPostData, V1FactorioConsoleCommandPermissionsGroupPlayerPostErrors, V1FactorioConsoleCommandPermissionsGroupPlayerPostResponses, V1FactorioConsoleCommandPermissionsGroupPlayersGetData, V1FactorioConsoleCommandPermissionsGroupPlayersGetErrors, V1FactorioConsoleCommandPermissionsGroupPlayersGetResponses, V1FactorioConsoleCommandPermissionsGroupPostData, V1FactorioConsoleCommandPermissionsGroupPostErrors, V1FactorioConsoleCommandPermissionsGroupPostResponses, V1FactorioConsoleCommandPermissionsGroupPutData, V1FactorioConsoleCommandPermissionsGroupPutErrors, V1FactorioConsoleCommandPermissionsGroupPutResponses, V1FactorioConsoleCommandPlayersGetData, V1FactorioConsoleCommandPlayersGetErrors, V1FactorioConsoleCommandPlayersGetResponses, V1FactorioConsoleCommandPromotePostData, V1FactorioConsoleCommandPromotePostErrors, V1FactorioConsoleCommandPromotePostResponses, V1FactorioConsoleCommandPurgePostData, V1FactorioConsoleCommandPurgePostErrors, V1FactorioConsoleCommandPurgePostResponses, V1FactorioConsoleCommandRawPostData, V1FactorioConsoleCommandRawPostErrors, V1FactorioConsoleCommandRawPostResponses, V1FactorioConsoleCommandResetTipsPostData, V1FactorioConsoleCommandResetTipsPostErrors, V1FactorioConsoleCommandResetTipsPostResponses, V1FactorioConsoleCommandSeedGetData, V1FactorioConsoleCommandSeedGetErrors, V1FactorioConsoleCommandSeedGetResponses, V1FactorioConsoleCommandServerSavePostData, V1FactorioConsoleCommandServerSavePostErrors, V1FactorioConsoleCommandServerSavePostResponses, V1FactorioConsoleCommandTimeGetData, V1FactorioConsoleCommandTimeGetErrors, V1FactorioConsoleCommandTimeGetResponses, V1FactorioConsoleCommandToggleActionLoggingPostData, V1FactorioConsoleCommandToggleActionLoggingPostErrors, V1FactorioConsoleCommandToggleActionLoggingPostResponses, V1FactorioConsoleCommandToggleHeavyModePostData, V1FactorioConsoleCommandToggleHeavyModePostErrors, V1FactorioConsoleCommandToggleHeavyModePostResponses, V1FactorioConsoleCommandUnbanPostData, V1FactorioConsoleCommandUnbanPostErrors, V1FactorioConsoleCommandUnbanPostResponses, V1FactorioConsoleCommandUnignorePostData, V1FactorioConsoleCommandUnignorePostErrors, V1FactorioConsoleCommandUnignorePostResponses, V1FactorioConsoleCommandUnlockShortcutBarPostData, V1FactorioConsoleCommandUnlockShortcutBarPostErrors, V1FactorioConsoleCommandUnlockShortcutBarPostResponses, V1FactorioConsoleCommandUnlockTipsPostData, V1FactorioConsoleCommandUnlockTipsPostErrors, V1FactorioConsoleCommandUnlockTipsPostResponses, V1FactorioConsoleCommandUnmutePostData, V1FactorioConsoleCommandUnmutePostErrors, V1FactorioConsoleCommandUnmutePostResponses, V1FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostData, V1FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostErrors, V1FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostResponses, V1FactorioConsoleCommandVersionGetData, V1FactorioConsoleCommandVersionGetErrors, V1FactorioConsoleCommandVersionGetResponses, V1FactorioConsoleCommandWhisperPostData, V1FactorioConsoleCommandWhisperPostErrors, V1FactorioConsoleCommandWhisperPostResponses, V1FactorioConsoleCommandWhitelistDeleteData, V1FactorioConsoleCommandWhitelistDeleteErrors, V1FactorioConsoleCommandWhitelistDeleteResponses, V1FactorioConsoleCommandWhitelistGetData, V1FactorioConsoleCommandWhitelistGetErrors, V1FactorioConsoleCommandWhitelistGetResponses, V1FactorioConsoleCommandWhitelistPatchData, V1FactorioConsoleCommandWhitelistPatchErrors, V1FactorioConsoleCommandWhitelistPatchResponses, V1FactorioConsoleCommandWhitelistPostData, V1FactorioConsoleCommandWhitelistPostErrors, V1FactorioConsoleCommandWhitelistPostResponses, V2FactorioConsoleCommandAdminsGetData, V2FactorioConsoleCommandAdminsGetErrors, V2FactorioConsoleCommandAdminsGetResponses, V2FactorioConsoleCommandAlertsGetData, V2FactorioConsoleCommandAlertsGetErrors, V2FactorioConsoleCommandAlertsGetResponses, V2FactorioConsoleCommandBanPostData, V2FactorioConsoleCommandBanPostErrors, V2FactorioConsoleCommandBanPostResponses, V2FactorioConsoleCommandBansGetData, V2FactorioConsoleCommandBansGetErrors, V2FactorioConsoleCommandBansGetResponses, V2FactorioConsoleCommandDemotePostData, V2FactorioConsoleCommandDemotePostErrors, V2FactorioConsoleCommandDemotePostResponses, V2FactorioConsoleCommandEnableResearchQueuePostData, V2FactorioConsoleCommandEnableResearchQueuePostErrors, V2FactorioConsoleCommandEnableResearchQueuePostResponses, V2FactorioConsoleCommandEvolutionGetData, V2FactorioConsoleCommandEvolutionGetErrors, V2FactorioConsoleCommandEvolutionGetResponses, V2FactorioConsoleCommandEvolutionSurfaceNameGetData, V2FactorioConsoleCommandEvolutionSurfaceNameGetErrors, V2FactorioConsoleCommandEvolutionSurfaceNameGetResponses, V2FactorioConsoleCommandIgnorePostData, V2FactorioConsoleCommandIgnorePostErrors, V2FactorioConsoleCommandIgnorePostResponses, V2FactorioConsoleCommandKickPostData, V2FactorioConsoleCommandKickPostErrors, V2FactorioConsoleCommandKickPostResponses, V2FactorioConsoleCommandMessagePostData, V2FactorioConsoleCommandMessagePostErrors, V2FactorioConsoleCommandMessagePostResponses, V2FactorioConsoleCommandMutePostData, V2FactorioConsoleCommandMutePostErrors, V2FactorioConsoleCommandMutePostResponses, V2FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostData, V2FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostErrors, V2FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostResponses, V2FactorioConsoleCommandMutesGetData, V2FactorioConsoleCommandMutesGetErrors, V2FactorioConsoleCommandMutesGetResponses, V2FactorioConsoleCommandPermissionsGetData, V2FactorioConsoleCommandPermissionsGetErrors, V2FactorioConsoleCommandPermissionsGetResponses, V2FactorioConsoleCommandPermissionsGroupDeleteData, V2FactorioConsoleCommandPermissionsGroupDeleteErrors, V2FactorioConsoleCommandPermissionsGroupDeleteResponses, V2FactorioConsoleCommandPermissionsGroupPatchData, V2FactorioConsoleCommandPermissionsGroupPatchErrors, V2FactorioConsoleCommandPermissionsGroupPatchResponses, V2FactorioConsoleCommandPermissionsGroupPlayerDeleteData, V2FactorioConsoleCommandPermissionsGroupPlayerDeleteErrors, V2FactorioConsoleCommandPermissionsGroupPlayerDeleteResponses, V2FactorioConsoleCommandPermissionsGroupPlayerPostData, V2FactorioConsoleCommandPermissionsGroupPlayerPostErrors, V2FactorioConsoleCommandPermissionsGroupPlayerPostResponses, V2FactorioConsoleCommandPermissionsGroupPlayersGetData, V2FactorioConsoleCommandPermissionsGroupPlayersGetErrors, V2FactorioConsoleCommandPermissionsGroupPlayersGetResponses, V2FactorioConsoleCommandPermissionsGroupPostData, V2FactorioConsoleCommandPermissionsGroupPostErrors, V2FactorioConsoleCommandPermissionsGroupPostResponses, V2FactorioConsoleCommandPermissionsGroupPutData, V2FactorioConsoleCommandPermissionsGroupPutErrors, V2FactorioConsoleCommandPermissionsGroupPutResponses, V2FactorioConsoleCommandPlayersGetData, V2FactorioConsoleCommandPlayersGetErrors, V2FactorioConsoleCommandPlayersGetResponses, V2FactorioConsoleCommandPromotePostData, V2FactorioConsoleCommandPromotePostErrors, V2FactorioConsoleCommandPromotePostResponses, V2FactorioConsoleCommandPurgePostData, V2FactorioConsoleCommandPurgePostErrors, V2FactorioConsoleCommandPurgePostResponses, V2FactorioConsoleCommandRawPostData, V2FactorioConsoleCommandRawPostErrors, V2FactorioConsoleCommandRawPostResponses, V2FactorioConsoleCommandResetTipsPostData, V2FactorioConsoleCommandResetTipsPostErrors, V2FactorioConsoleCommandResetTipsPostResponses, V2FactorioConsoleCommandSeedGetData, V2FactorioConsoleCommandSeedGetErrors, V2FactorioConsoleCommandSeedGetResponses, V2FactorioConsoleCommandServerSavePostData, V2FactorioConsoleCommandServerSavePostErrors, V2FactorioConsoleCommandServerSavePostResponses, V2FactorioConsoleCommandTimeGetData, V2FactorioConsoleCommandTimeGetErrors, V2FactorioConsoleCommandTimeGetResponses, V2FactorioConsoleCommandToggleActionLoggingPostData, V2FactorioConsoleCommandToggleActionLoggingPostErrors, V2FactorioConsoleCommandToggleActionLoggingPostResponses, V2FactorioConsoleCommandToggleHeavyModePostData, V2FactorioConsoleCommandToggleHeavyModePostErrors, V2FactorioConsoleCommandToggleHeavyModePostResponses, V2FactorioConsoleCommandUnbanPostData, V2FactorioConsoleCommandUnbanPostErrors, V2FactorioConsoleCommandUnbanPostResponses, V2FactorioConsoleCommandUnignorePostData, V2FactorioConsoleCommandUnignorePostErrors, V2FactorioConsoleCommandUnignorePostResponses, V2FactorioConsoleCommandUnlockShortcutBarPostData, V2FactorioConsoleCommandUnlockShortcutBarPostErrors, V2FactorioConsoleCommandUnlockShortcutBarPostResponses, V2FactorioConsoleCommandUnlockTipsPostData, V2FactorioConsoleCommandUnlockTipsPostErrors, V2FactorioConsoleCommandUnlockTipsPostResponses, V2FactorioConsoleCommandUnmutePostData, V2FactorioConsoleCommandUnmutePostErrors, V2FactorioConsoleCommandUnmutePostResponses, V2FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostData, V2FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostErrors, V2FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostResponses, V2FactorioConsoleCommandVersionGetData, V2FactorioConsoleCommandVersionGetErrors, V2FactorioConsoleCommandVersionGetResponses, V2FactorioConsoleCommandWhisperPostData, V2FactorioConsoleCommandWhisperPostErrors, V2FactorioConsoleCommandWhisperPostResponses, V2FactorioConsoleCommandWhitelistDeleteData, V2FactorioConsoleCommandWhitelistDeleteErrors, V2FactorioConsoleCommandWhitelistDeleteResponses, V2FactorioConsoleCommandWhitelistGetData, V2FactorioConsoleCommandWhitelistGetErrors, V2FactorioConsoleCommandWhitelistGetResponses, V2FactorioConsoleCommandWhitelistPatchData, V2FactorioConsoleCommandWhitelistPatchErrors, V2FactorioConsoleCommandWhitelistPatchResponses, V2FactorioConsoleCommandWhitelistPostData, V2FactorioConsoleCommandWhitelistPostErrors, V2FactorioConsoleCommandWhitelistPostResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get the list of admins.
 * Get the list of admins.
 */
export const v1FactorioConsoleCommandAdminsGet = <ThrowOnError extends boolean = false>(options?: Options<V1FactorioConsoleCommandAdminsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V1FactorioConsoleCommandAdminsGetResponses, V1FactorioConsoleCommandAdminsGetErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/admins',
        ...options
    });
};

/**
 * Get the list of alerts.
 * Get the list of alerts.
 */
export const v1FactorioConsoleCommandAlertsGet = <ThrowOnError extends boolean = false>(options?: Options<V1FactorioConsoleCommandAlertsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V1FactorioConsoleCommandAlertsGetResponses, V1FactorioConsoleCommandAlertsGetErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/alerts',
        ...options
    });
};

/**
 * Ban a player.
 * Ban a player.
 */
export const v1FactorioConsoleCommandBanPost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandBanPostData, ThrowOnError>) => {
    return (options.client ?? client).post<V1FactorioConsoleCommandBanPostResponses, V1FactorioConsoleCommandBanPostErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/ban',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the list of bans.
 * Get the list of bans.
 */
export const v1FactorioConsoleCommandBansGet = <ThrowOnError extends boolean = false>(options?: Options<V1FactorioConsoleCommandBansGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V1FactorioConsoleCommandBansGetResponses, V1FactorioConsoleCommandBansGetErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/bans',
        ...options
    });
};

/**
 * Demote a player.
 * Demote a player.
 */
export const v1FactorioConsoleCommandDemotePost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandDemotePostData, ThrowOnError>) => {
    return (options.client ?? client).post<V1FactorioConsoleCommandDemotePostResponses, V1FactorioConsoleCommandDemotePostErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/demote',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Enable the research queue.
 * Enable the research queue.
 */
export const v1FactorioConsoleCommandEnableResearchQueuePost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandEnableResearchQueuePostData, ThrowOnError>) => {
    return (options.client ?? client).post<V1FactorioConsoleCommandEnableResearchQueuePostResponses, V1FactorioConsoleCommandEnableResearchQueuePostErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/enable-research-queue',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get info about the alien evolution factor.
 * Get info about the alien evolution factor.
 */
export const v1FactorioConsoleCommandEvolutionGet = <ThrowOnError extends boolean = false>(options?: Options<V1FactorioConsoleCommandEvolutionGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V1FactorioConsoleCommandEvolutionGetResponses, V1FactorioConsoleCommandEvolutionGetErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/evolution',
        ...options
    });
};

/**
 * Ignore a player.
 * Ignore a player.
 */
export const v1FactorioConsoleCommandIgnorePost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandIgnorePostData, ThrowOnError>) => {
    return (options.client ?? client).post<V1FactorioConsoleCommandIgnorePostResponses, V1FactorioConsoleCommandIgnorePostErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/ignore',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Kick a player.
 * Kick a player.
 */
export const v1FactorioConsoleCommandKickPost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandKickPostData, ThrowOnError>) => {
    return (options.client ?? client).post<V1FactorioConsoleCommandKickPostResponses, V1FactorioConsoleCommandKickPostErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/kick',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Send a message to all players.
 * Send a message to all players.
 */
export const v1FactorioConsoleCommandMessagePost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandMessagePostData, ThrowOnError>) => {
    return (options.client ?? client).post<V1FactorioConsoleCommandMessagePostResponses, V1FactorioConsoleCommandMessagePostErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/message',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mute a player.
 * Mute a player.
 */
export const v1FactorioConsoleCommandMutePost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandMutePostData, ThrowOnError>) => {
    return (options.client ?? client).post<V1FactorioConsoleCommandMutePostResponses, V1FactorioConsoleCommandMutePostErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/mute',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mute all programmable speakers.
 * Mute all programmable speakers.
 */
export const v1FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostData, ThrowOnError>) => {
    return (options.client ?? client).post<V1FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostResponses, V1FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/mute-programmable-speaker-for-everyone',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the list of mutes.
 * Get the list of mutes.
 */
export const v1FactorioConsoleCommandMutesGet = <ThrowOnError extends boolean = false>(options?: Options<V1FactorioConsoleCommandMutesGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V1FactorioConsoleCommandMutesGetResponses, V1FactorioConsoleCommandMutesGetErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/mutes',
        ...options
    });
};

/**
 * Get the list of permissions.
 * Get the list of permissions.
 */
export const v1FactorioConsoleCommandPermissionsGet = <ThrowOnError extends boolean = false>(options?: Options<V1FactorioConsoleCommandPermissionsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V1FactorioConsoleCommandPermissionsGetResponses, V1FactorioConsoleCommandPermissionsGetErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/permissions',
        ...options
    });
};

/**
 * Delete a group.
 * Delete a group.
 */
export const v1FactorioConsoleCommandPermissionsGroupDelete = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandPermissionsGroupDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<V1FactorioConsoleCommandPermissionsGroupDeleteResponses, V1FactorioConsoleCommandPermissionsGroupDeleteErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/permissions/group',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Edit a group.
 * Edit a group.
 */
export const v1FactorioConsoleCommandPermissionsGroupPatch = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandPermissionsGroupPatchData, ThrowOnError>) => {
    return (options.client ?? client).patch<V1FactorioConsoleCommandPermissionsGroupPatchResponses, V1FactorioConsoleCommandPermissionsGroupPatchErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/permissions/group',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a group.
 * Create a group.
 */
export const v1FactorioConsoleCommandPermissionsGroupPost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandPermissionsGroupPostData, ThrowOnError>) => {
    return (options.client ?? client).post<V1FactorioConsoleCommandPermissionsGroupPostResponses, V1FactorioConsoleCommandPermissionsGroupPostErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/permissions/group',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Rename a group.
 * Rename a group.
 */
export const v1FactorioConsoleCommandPermissionsGroupPut = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandPermissionsGroupPutData, ThrowOnError>) => {
    return (options.client ?? client).put<V1FactorioConsoleCommandPermissionsGroupPutResponses, V1FactorioConsoleCommandPermissionsGroupPutErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/permissions/group',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove a player from a group.
 * Remove a player from a group.
 */
export const v1FactorioConsoleCommandPermissionsGroupPlayerDelete = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandPermissionsGroupPlayerDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<V1FactorioConsoleCommandPermissionsGroupPlayerDeleteResponses, V1FactorioConsoleCommandPermissionsGroupPlayerDeleteErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/permissions/group/player',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Add a player to a group.
 * Add a player to a group.
 */
export const v1FactorioConsoleCommandPermissionsGroupPlayerPost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandPermissionsGroupPlayerPostData, ThrowOnError>) => {
    return (options.client ?? client).post<V1FactorioConsoleCommandPermissionsGroupPlayerPostResponses, V1FactorioConsoleCommandPermissionsGroupPlayerPostErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/permissions/group/player',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the groups for a player.
 * Get the groups for a player.
 */
export const v1FactorioConsoleCommandPermissionsGroupPlayersGet = <ThrowOnError extends boolean = false>(options?: Options<V1FactorioConsoleCommandPermissionsGroupPlayersGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V1FactorioConsoleCommandPermissionsGroupPlayersGetResponses, V1FactorioConsoleCommandPermissionsGroupPlayersGetErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/permissions/group/players',
        ...options
    });
};

/**
 * Get the list of players.
 * Get the list of players.
 */
export const v1FactorioConsoleCommandPlayersGet = <ThrowOnError extends boolean = false>(options?: Options<V1FactorioConsoleCommandPlayersGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V1FactorioConsoleCommandPlayersGetResponses, V1FactorioConsoleCommandPlayersGetErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/players',
        ...options
    });
};

/**
 * Promote a player.
 * Promote a player.
 */
export const v1FactorioConsoleCommandPromotePost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandPromotePostData, ThrowOnError>) => {
    return (options.client ?? client).post<V1FactorioConsoleCommandPromotePostResponses, V1FactorioConsoleCommandPromotePostErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/promote',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Purge a player.
 * Purge a player.
 */
export const v1FactorioConsoleCommandPurgePost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandPurgePostData, ThrowOnError>) => {
    return (options.client ?? client).post<V1FactorioConsoleCommandPurgePostResponses, V1FactorioConsoleCommandPurgePostErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/purge',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Executes a Lua command (if allowed).
 * Executes a Lua command (if allowed).
 */
export const v1FactorioConsoleCommandRawPost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandRawPostData, ThrowOnError>) => {
    return (options.client ?? client).post<V1FactorioConsoleCommandRawPostResponses, V1FactorioConsoleCommandRawPostErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/raw',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Reset the tips.
 * Reset the tips.
 */
export const v1FactorioConsoleCommandResetTipsPost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandResetTipsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<V1FactorioConsoleCommandResetTipsPostResponses, V1FactorioConsoleCommandResetTipsPostErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/reset-tips',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the map seed.
 * Get the map seed.
 */
export const v1FactorioConsoleCommandSeedGet = <ThrowOnError extends boolean = false>(options?: Options<V1FactorioConsoleCommandSeedGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V1FactorioConsoleCommandSeedGetResponses, V1FactorioConsoleCommandSeedGetErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/seed',
        ...options
    });
};

/**
 * Save the game.
 * Save the game.
 */
export const v1FactorioConsoleCommandServerSavePost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandServerSavePostData, ThrowOnError>) => {
    return (options.client ?? client).post<V1FactorioConsoleCommandServerSavePostResponses, V1FactorioConsoleCommandServerSavePostErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/server-save',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the current game time.
 * Get the current game time.
 */
export const v1FactorioConsoleCommandTimeGet = <ThrowOnError extends boolean = false>(options?: Options<V1FactorioConsoleCommandTimeGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V1FactorioConsoleCommandTimeGetResponses, V1FactorioConsoleCommandTimeGetErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/time',
        ...options
    });
};

/**
 * Toggle the action logging.
 * Toggle the action logging.
 */
export const v1FactorioConsoleCommandToggleActionLoggingPost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandToggleActionLoggingPostData, ThrowOnError>) => {
    return (options.client ?? client).post<V1FactorioConsoleCommandToggleActionLoggingPostResponses, V1FactorioConsoleCommandToggleActionLoggingPostErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/toggle-action-logging',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Toggle the heavy mode.
 * Toggle the heavy mode.
 */
export const v1FactorioConsoleCommandToggleHeavyModePost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandToggleHeavyModePostData, ThrowOnError>) => {
    return (options.client ?? client).post<V1FactorioConsoleCommandToggleHeavyModePostResponses, V1FactorioConsoleCommandToggleHeavyModePostErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/toggle-heavy-mode',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unban a player.
 * Unban a player.
 */
export const v1FactorioConsoleCommandUnbanPost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandUnbanPostData, ThrowOnError>) => {
    return (options.client ?? client).post<V1FactorioConsoleCommandUnbanPostResponses, V1FactorioConsoleCommandUnbanPostErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/unban',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unignore a player.
 * Unignore a player.
 */
export const v1FactorioConsoleCommandUnignorePost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandUnignorePostData, ThrowOnError>) => {
    return (options.client ?? client).post<V1FactorioConsoleCommandUnignorePostResponses, V1FactorioConsoleCommandUnignorePostErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/unignore',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unlock the shortcut bar.
 * Unlock the shortcut bar.
 */
export const v1FactorioConsoleCommandUnlockShortcutBarPost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandUnlockShortcutBarPostData, ThrowOnError>) => {
    return (options.client ?? client).post<V1FactorioConsoleCommandUnlockShortcutBarPostResponses, V1FactorioConsoleCommandUnlockShortcutBarPostErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/unlock-shortcut-bar',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unlock the tips.
 * Unlock the tips.
 */
export const v1FactorioConsoleCommandUnlockTipsPost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandUnlockTipsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<V1FactorioConsoleCommandUnlockTipsPostResponses, V1FactorioConsoleCommandUnlockTipsPostErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/unlock-tips',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unmute a player.
 * Unmute a player.
 */
export const v1FactorioConsoleCommandUnmutePost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandUnmutePostData, ThrowOnError>) => {
    return (options.client ?? client).post<V1FactorioConsoleCommandUnmutePostResponses, V1FactorioConsoleCommandUnmutePostErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/unmute',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unmute all programmable speakers.
 * Unmute all programmable speakers.
 */
export const v1FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostData, ThrowOnError>) => {
    return (options.client ?? client).post<V1FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostResponses, V1FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/unmute-programmable-speaker-for-everyone',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the version of the current Factorio game server.
 * Get the version of the current Factorio game server.
 */
export const v1FactorioConsoleCommandVersionGet = <ThrowOnError extends boolean = false>(options?: Options<V1FactorioConsoleCommandVersionGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V1FactorioConsoleCommandVersionGetResponses, V1FactorioConsoleCommandVersionGetErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/version',
        ...options
    });
};

/**
 * Whisper a message.
 * Whisper a message.
 */
export const v1FactorioConsoleCommandWhisperPost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandWhisperPostData, ThrowOnError>) => {
    return (options.client ?? client).post<V1FactorioConsoleCommandWhisperPostResponses, V1FactorioConsoleCommandWhisperPostErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/whisper',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Clear the whitelist.
 * Clear the whitelist.
 */
export const v1FactorioConsoleCommandWhitelistDelete = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandWhitelistDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<V1FactorioConsoleCommandWhitelistDeleteResponses, V1FactorioConsoleCommandWhitelistDeleteErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/whitelist',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the list of whitelist.
 * Get the list of whitelist.
 */
export const v1FactorioConsoleCommandWhitelistGet = <ThrowOnError extends boolean = false>(options?: Options<V1FactorioConsoleCommandWhitelistGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V1FactorioConsoleCommandWhitelistGetResponses, V1FactorioConsoleCommandWhitelistGetErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/whitelist',
        ...options
    });
};

/**
 * Remove a player from the whitelist.
 * Remove a player from the whitelist.
 */
export const v1FactorioConsoleCommandWhitelistPatch = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandWhitelistPatchData, ThrowOnError>) => {
    return (options.client ?? client).patch<V1FactorioConsoleCommandWhitelistPatchResponses, V1FactorioConsoleCommandWhitelistPatchErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/whitelist',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Add a player to the whitelist.
 * Add a player to the whitelist.
 */
export const v1FactorioConsoleCommandWhitelistPost = <ThrowOnError extends boolean = false>(options: Options<V1FactorioConsoleCommandWhitelistPostData, ThrowOnError>) => {
    return (options.client ?? client).post<V1FactorioConsoleCommandWhitelistPostResponses, V1FactorioConsoleCommandWhitelistPostErrors, ThrowOnError>({
        url: '/api/v1/factorio/console/command/whitelist',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the list of admins.
 * Get the list of admins.
 */
export const v2FactorioConsoleCommandAdminsGet = <ThrowOnError extends boolean = false>(options?: Options<V2FactorioConsoleCommandAdminsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V2FactorioConsoleCommandAdminsGetResponses, V2FactorioConsoleCommandAdminsGetErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/admins',
        ...options
    });
};

/**
 * Get the list of alerts.
 * Get the list of alerts.
 */
export const v2FactorioConsoleCommandAlertsGet = <ThrowOnError extends boolean = false>(options?: Options<V2FactorioConsoleCommandAlertsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V2FactorioConsoleCommandAlertsGetResponses, V2FactorioConsoleCommandAlertsGetErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/alerts',
        ...options
    });
};

/**
 * Ban a player.
 * Ban a player.
 */
export const v2FactorioConsoleCommandBanPost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandBanPostData, ThrowOnError>) => {
    return (options.client ?? client).post<V2FactorioConsoleCommandBanPostResponses, V2FactorioConsoleCommandBanPostErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/ban',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the list of bans.
 * Get the list of bans.
 */
export const v2FactorioConsoleCommandBansGet = <ThrowOnError extends boolean = false>(options?: Options<V2FactorioConsoleCommandBansGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V2FactorioConsoleCommandBansGetResponses, V2FactorioConsoleCommandBansGetErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/bans',
        ...options
    });
};

/**
 * Demote a player.
 * Demote a player.
 */
export const v2FactorioConsoleCommandDemotePost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandDemotePostData, ThrowOnError>) => {
    return (options.client ?? client).post<V2FactorioConsoleCommandDemotePostResponses, V2FactorioConsoleCommandDemotePostErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/demote',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Enable the research queue.
 * Enable the research queue.
 */
export const v2FactorioConsoleCommandEnableResearchQueuePost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandEnableResearchQueuePostData, ThrowOnError>) => {
    return (options.client ?? client).post<V2FactorioConsoleCommandEnableResearchQueuePostResponses, V2FactorioConsoleCommandEnableResearchQueuePostErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/enable-research-queue',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get info about the alien evolution factor.
 * Get info about the alien evolution factor.
 */
export const v2FactorioConsoleCommandEvolutionGet = <ThrowOnError extends boolean = false>(options?: Options<V2FactorioConsoleCommandEvolutionGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V2FactorioConsoleCommandEvolutionGetResponses, V2FactorioConsoleCommandEvolutionGetErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/evolution',
        ...options
    });
};

/**
 * Alien evolution factor by surface name.
 * Get info about the alien evolution factor by sepecific surface name. Equavalent to `/evolution <surface_name>` command in Factorio.
 */
export const v2FactorioConsoleCommandEvolutionSurfaceNameGet = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandEvolutionSurfaceNameGetData, ThrowOnError>) => {
    return (options.client ?? client).get<V2FactorioConsoleCommandEvolutionSurfaceNameGetResponses, V2FactorioConsoleCommandEvolutionSurfaceNameGetErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/evolution/{surfaceName}',
        ...options
    });
};

/**
 * Ignore a player.
 * Ignore a player.
 */
export const v2FactorioConsoleCommandIgnorePost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandIgnorePostData, ThrowOnError>) => {
    return (options.client ?? client).post<V2FactorioConsoleCommandIgnorePostResponses, V2FactorioConsoleCommandIgnorePostErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/ignore',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Kick a player.
 * Kick a player.
 */
export const v2FactorioConsoleCommandKickPost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandKickPostData, ThrowOnError>) => {
    return (options.client ?? client).post<V2FactorioConsoleCommandKickPostResponses, V2FactorioConsoleCommandKickPostErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/kick',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Send a message to all players.
 * Send a message to all players.
 */
export const v2FactorioConsoleCommandMessagePost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandMessagePostData, ThrowOnError>) => {
    return (options.client ?? client).post<V2FactorioConsoleCommandMessagePostResponses, V2FactorioConsoleCommandMessagePostErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/message',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mute a player.
 * Mute a player.
 */
export const v2FactorioConsoleCommandMutePost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandMutePostData, ThrowOnError>) => {
    return (options.client ?? client).post<V2FactorioConsoleCommandMutePostResponses, V2FactorioConsoleCommandMutePostErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/mute',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mute all programmable speakers.
 * Mute all programmable speakers.
 */
export const v2FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostData, ThrowOnError>) => {
    return (options.client ?? client).post<V2FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostResponses, V2FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/mute-programmable-speaker-for-everyone',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the list of mutes.
 * Get the list of mutes.
 */
export const v2FactorioConsoleCommandMutesGet = <ThrowOnError extends boolean = false>(options?: Options<V2FactorioConsoleCommandMutesGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V2FactorioConsoleCommandMutesGetResponses, V2FactorioConsoleCommandMutesGetErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/mutes',
        ...options
    });
};

/**
 * Get the list of permissions.
 * Get the list of permissions.
 */
export const v2FactorioConsoleCommandPermissionsGet = <ThrowOnError extends boolean = false>(options?: Options<V2FactorioConsoleCommandPermissionsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V2FactorioConsoleCommandPermissionsGetResponses, V2FactorioConsoleCommandPermissionsGetErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/permissions',
        ...options
    });
};

/**
 * Delete a group.
 * Delete a group.
 */
export const v2FactorioConsoleCommandPermissionsGroupDelete = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandPermissionsGroupDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<V2FactorioConsoleCommandPermissionsGroupDeleteResponses, V2FactorioConsoleCommandPermissionsGroupDeleteErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/permissions/group',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Edit a group.
 * Edit a group.
 */
export const v2FactorioConsoleCommandPermissionsGroupPatch = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandPermissionsGroupPatchData, ThrowOnError>) => {
    return (options.client ?? client).patch<V2FactorioConsoleCommandPermissionsGroupPatchResponses, V2FactorioConsoleCommandPermissionsGroupPatchErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/permissions/group',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a group.
 * Create a group.
 */
export const v2FactorioConsoleCommandPermissionsGroupPost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandPermissionsGroupPostData, ThrowOnError>) => {
    return (options.client ?? client).post<V2FactorioConsoleCommandPermissionsGroupPostResponses, V2FactorioConsoleCommandPermissionsGroupPostErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/permissions/group',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Rename a group.
 * Rename a group.
 */
export const v2FactorioConsoleCommandPermissionsGroupPut = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandPermissionsGroupPutData, ThrowOnError>) => {
    return (options.client ?? client).put<V2FactorioConsoleCommandPermissionsGroupPutResponses, V2FactorioConsoleCommandPermissionsGroupPutErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/permissions/group',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove a player from a group.
 * Remove a player from a group.
 */
export const v2FactorioConsoleCommandPermissionsGroupPlayerDelete = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandPermissionsGroupPlayerDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<V2FactorioConsoleCommandPermissionsGroupPlayerDeleteResponses, V2FactorioConsoleCommandPermissionsGroupPlayerDeleteErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/permissions/group/player',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Add a player to a group.
 * Add a player to a group.
 */
export const v2FactorioConsoleCommandPermissionsGroupPlayerPost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandPermissionsGroupPlayerPostData, ThrowOnError>) => {
    return (options.client ?? client).post<V2FactorioConsoleCommandPermissionsGroupPlayerPostResponses, V2FactorioConsoleCommandPermissionsGroupPlayerPostErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/permissions/group/player',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the groups for a player.
 * Get the groups for a player.
 */
export const v2FactorioConsoleCommandPermissionsGroupPlayersGet = <ThrowOnError extends boolean = false>(options?: Options<V2FactorioConsoleCommandPermissionsGroupPlayersGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V2FactorioConsoleCommandPermissionsGroupPlayersGetResponses, V2FactorioConsoleCommandPermissionsGroupPlayersGetErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/permissions/group/players',
        ...options
    });
};

/**
 * Get the list of players.
 * Get the list of players.
 */
export const v2FactorioConsoleCommandPlayersGet = <ThrowOnError extends boolean = false>(options?: Options<V2FactorioConsoleCommandPlayersGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V2FactorioConsoleCommandPlayersGetResponses, V2FactorioConsoleCommandPlayersGetErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/players',
        ...options
    });
};

/**
 * Promote a player.
 * Promote a player.
 */
export const v2FactorioConsoleCommandPromotePost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandPromotePostData, ThrowOnError>) => {
    return (options.client ?? client).post<V2FactorioConsoleCommandPromotePostResponses, V2FactorioConsoleCommandPromotePostErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/promote',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Purge a player.
 * Purge a player.
 */
export const v2FactorioConsoleCommandPurgePost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandPurgePostData, ThrowOnError>) => {
    return (options.client ?? client).post<V2FactorioConsoleCommandPurgePostResponses, V2FactorioConsoleCommandPurgePostErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/purge',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Executes a Lua command (if allowed).
 * Executes a Lua command (if allowed).
 */
export const v2FactorioConsoleCommandRawPost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandRawPostData, ThrowOnError>) => {
    return (options.client ?? client).post<V2FactorioConsoleCommandRawPostResponses, V2FactorioConsoleCommandRawPostErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/raw',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Reset the tips.
 * Reset the tips.
 */
export const v2FactorioConsoleCommandResetTipsPost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandResetTipsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<V2FactorioConsoleCommandResetTipsPostResponses, V2FactorioConsoleCommandResetTipsPostErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/reset-tips',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the map seed.
 * Get the map seed.
 */
export const v2FactorioConsoleCommandSeedGet = <ThrowOnError extends boolean = false>(options?: Options<V2FactorioConsoleCommandSeedGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V2FactorioConsoleCommandSeedGetResponses, V2FactorioConsoleCommandSeedGetErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/seed',
        ...options
    });
};

/**
 * Save the game.
 * Save the game.
 */
export const v2FactorioConsoleCommandServerSavePost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandServerSavePostData, ThrowOnError>) => {
    return (options.client ?? client).post<V2FactorioConsoleCommandServerSavePostResponses, V2FactorioConsoleCommandServerSavePostErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/server-save',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the current game time.
 * Get the current game time.
 */
export const v2FactorioConsoleCommandTimeGet = <ThrowOnError extends boolean = false>(options?: Options<V2FactorioConsoleCommandTimeGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V2FactorioConsoleCommandTimeGetResponses, V2FactorioConsoleCommandTimeGetErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/time',
        ...options
    });
};

/**
 * Toggle the action logging.
 * Toggle the action logging.
 */
export const v2FactorioConsoleCommandToggleActionLoggingPost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandToggleActionLoggingPostData, ThrowOnError>) => {
    return (options.client ?? client).post<V2FactorioConsoleCommandToggleActionLoggingPostResponses, V2FactorioConsoleCommandToggleActionLoggingPostErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/toggle-action-logging',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Toggle the heavy mode.
 * Toggle the heavy mode.
 */
export const v2FactorioConsoleCommandToggleHeavyModePost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandToggleHeavyModePostData, ThrowOnError>) => {
    return (options.client ?? client).post<V2FactorioConsoleCommandToggleHeavyModePostResponses, V2FactorioConsoleCommandToggleHeavyModePostErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/toggle-heavy-mode',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unban a player.
 * Unban a player.
 */
export const v2FactorioConsoleCommandUnbanPost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandUnbanPostData, ThrowOnError>) => {
    return (options.client ?? client).post<V2FactorioConsoleCommandUnbanPostResponses, V2FactorioConsoleCommandUnbanPostErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/unban',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unignore a player.
 * Unignore a player.
 */
export const v2FactorioConsoleCommandUnignorePost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandUnignorePostData, ThrowOnError>) => {
    return (options.client ?? client).post<V2FactorioConsoleCommandUnignorePostResponses, V2FactorioConsoleCommandUnignorePostErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/unignore',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unlock the shortcut bar.
 * Unlock the shortcut bar.
 */
export const v2FactorioConsoleCommandUnlockShortcutBarPost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandUnlockShortcutBarPostData, ThrowOnError>) => {
    return (options.client ?? client).post<V2FactorioConsoleCommandUnlockShortcutBarPostResponses, V2FactorioConsoleCommandUnlockShortcutBarPostErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/unlock-shortcut-bar',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unlock the tips.
 * Unlock the tips.
 */
export const v2FactorioConsoleCommandUnlockTipsPost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandUnlockTipsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<V2FactorioConsoleCommandUnlockTipsPostResponses, V2FactorioConsoleCommandUnlockTipsPostErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/unlock-tips',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unmute a player.
 * Unmute a player.
 */
export const v2FactorioConsoleCommandUnmutePost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandUnmutePostData, ThrowOnError>) => {
    return (options.client ?? client).post<V2FactorioConsoleCommandUnmutePostResponses, V2FactorioConsoleCommandUnmutePostErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/unmute',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unmute all programmable speakers.
 * Unmute all programmable speakers.
 */
export const v2FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostData, ThrowOnError>) => {
    return (options.client ?? client).post<V2FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostResponses, V2FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/unmute-programmable-speaker-for-everyone',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the version of the current Factorio game server.
 * Get the version of the current Factorio game server.
 */
export const v2FactorioConsoleCommandVersionGet = <ThrowOnError extends boolean = false>(options?: Options<V2FactorioConsoleCommandVersionGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V2FactorioConsoleCommandVersionGetResponses, V2FactorioConsoleCommandVersionGetErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/version',
        ...options
    });
};

/**
 * Whisper a message.
 * Whisper a message.
 */
export const v2FactorioConsoleCommandWhisperPost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandWhisperPostData, ThrowOnError>) => {
    return (options.client ?? client).post<V2FactorioConsoleCommandWhisperPostResponses, V2FactorioConsoleCommandWhisperPostErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/whisper',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Clear the whitelist.
 * Clear the whitelist.
 */
export const v2FactorioConsoleCommandWhitelistDelete = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandWhitelistDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<V2FactorioConsoleCommandWhitelistDeleteResponses, V2FactorioConsoleCommandWhitelistDeleteErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/whitelist',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the list of whitelist.
 * Get the list of whitelist.
 */
export const v2FactorioConsoleCommandWhitelistGet = <ThrowOnError extends boolean = false>(options?: Options<V2FactorioConsoleCommandWhitelistGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<V2FactorioConsoleCommandWhitelistGetResponses, V2FactorioConsoleCommandWhitelistGetErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/whitelist',
        ...options
    });
};

/**
 * Remove a player from the whitelist.
 * Remove a player from the whitelist.
 */
export const v2FactorioConsoleCommandWhitelistPatch = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandWhitelistPatchData, ThrowOnError>) => {
    return (options.client ?? client).patch<V2FactorioConsoleCommandWhitelistPatchResponses, V2FactorioConsoleCommandWhitelistPatchErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/whitelist',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Add a player to the whitelist.
 * Add a player to the whitelist.
 */
export const v2FactorioConsoleCommandWhitelistPost = <ThrowOnError extends boolean = false>(options: Options<V2FactorioConsoleCommandWhitelistPostData, ThrowOnError>) => {
    return (options.client ?? client).post<V2FactorioConsoleCommandWhitelistPostResponses, V2FactorioConsoleCommandWhitelistPostErrors, ThrowOnError>({
        url: '/api/v2/factorio/console/command/whitelist',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};
