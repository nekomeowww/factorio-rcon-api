// This file is auto-generated by @hey-api/openapi-ts

export type Factorioapiv1CommandAdminsResponse = {
    /**
     * The list of admins.
     */
    admins?: Array<Factorioapiv1Player>;
};

export type Factorioapiv1CommandAlertsResponse = {
    /**
     * The list of alerts.
     */
    alerts?: Array<string>;
};

export type Factorioapiv1CommandBanRequest = {
    /**
     * The username to ban.
     */
    username?: string;
};

export type Factorioapiv1CommandBanResponse = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandBansResponse = {
    /**
     * The list of bans.
     */
    bans?: Array<Factorioapiv1Player>;
};

export type Factorioapiv1CommandDemoteRequest = {
    /**
     * The username to demote.
     */
    username?: string;
};

export type Factorioapiv1CommandDemoteResponse = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandEnableResearchQueueRequest = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandEnableResearchQueueResponse = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandEvolutionResponse = {
    /**
     * The current alien evolution factor.
     */
    evolutionFactor?: number;
    pollution?: number;
    spawnerKills?: number;
    time?: number;
};

export type Factorioapiv1CommandIgnoreRequest = {
    /**
     * The username to ignore.
     */
    username?: string;
};

export type Factorioapiv1CommandIgnoreResponse = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandKickRequest = {
    /**
     * The reason for the kick.
     */
    reason?: string;
    /**
     * The username to kick.
     */
    username?: string;
};

export type Factorioapiv1CommandKickResponse = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandMessageRequest = {
    /**
     * The message to send.
     */
    message?: string;
};

export type Factorioapiv1CommandMessageResponse = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandMuteProgrammableSpeakerForEveryoneRequest = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandMuteProgrammableSpeakerForEveryoneResponse = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandMuteRequest = {
    /**
     * The username to mute.
     */
    username?: string;
};

export type Factorioapiv1CommandMuteResponse = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandMutesResponse = {
    /**
     * The list of mutes.
     */
    mutes?: Array<Factorioapiv1Player>;
};

export type Factorioapiv1CommandPermissionsAddPlayerRequest = {
    /**
     * The group to add.
     */
    group?: string;
    /**
     * The username to add.
     */
    username?: string;
};

export type Factorioapiv1CommandPermissionsAddPlayerResponse = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandPermissionsCreateGroupRequest = {
    /**
     * The group to create.
     */
    group?: string;
};

export type Factorioapiv1CommandPermissionsCreateGroupResponse = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandPermissionsDeleteGroupRequest = {
    /**
     * The group to delete.
     */
    group?: string;
};

export type Factorioapiv1CommandPermissionsDeleteGroupResponse = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandPermissionsEditGroupRequest = {
    /**
     * The action to take.
     */
    action?: string;
    /**
     * The group to edit.
     */
    group?: string;
    /**
     * The value to set.
     */
    value?: boolean;
};

export type Factorioapiv1CommandPermissionsEditGroupResponse = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandPermissionsGetPlayerGroupResponse = {
    /**
     * The list of groups.
     */
    groups?: Array<string>;
};

export type Factorioapiv1CommandPermissionsRemovePlayerGroupRequest = {
    /**
     * The group to remove.
     */
    group?: string;
    /**
     * The username to remove.
     */
    username?: string;
};

export type Factorioapiv1CommandPermissionsRemovePlayerGroupResponse = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandPermissionsRenameGroupRequest = {
    /**
     * The group to rename.
     */
    group?: string;
    /**
     * The new group name.
     */
    newGroup?: string;
};

export type Factorioapiv1CommandPermissionsRenameGroupResponse = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandPermissionsResponse = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandPlayersResponse = {
    /**
     * The list of players.
     */
    players?: Array<Factorioapiv1Player>;
};

export type Factorioapiv1CommandPromoteRequest = {
    /**
     * The username to promote.
     */
    username?: string;
};

export type Factorioapiv1CommandPromoteResponse = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandPurgeRequest = {
    /**
     * The username to purge.
     */
    username?: string;
};

export type Factorioapiv1CommandPurgeResponse = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandRawRequest = {
    /**
     * The input for the command. For example, it will be formatted and executed with `/c game.player.zoom=0.1`.
     */
    input?: string;
};

export type Factorioapiv1CommandRawResponse = {
    /**
     * The output from the command.
     */
    output?: string;
};

export type Factorioapiv1CommandResetTipsRequest = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandResetTipsResponse = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandSeedResponse = {
    /**
     * The map seed.
     */
    seed?: string;
};

export type Factorioapiv1CommandServerSaveRequest = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandServerSaveResponse = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandTimeResponse = {
    /**
     * Get info about how old the map is, in seconds.
     */
    time?: number;
};

export type Factorioapiv1CommandToggleActionLoggingRequest = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandToggleActionLoggingResponse = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandToggleHeavyModeRequest = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandToggleHeavyModeResponse = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandUnbanRequest = {
    /**
     * The username to unban.
     */
    username?: string;
};

export type Factorioapiv1CommandUnbanResponse = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandUnignoreRequest = {
    /**
     * The username to unignore.
     */
    username?: string;
};

export type Factorioapiv1CommandUnignoreResponse = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandUnlockShortcutBarRequest = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandUnlockShortcutBarResponse = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandUnlockTipsRequest = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandUnlockTipsResponse = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandUnmuteProgrammableSpeakerForEveryoneRequest = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandUnmuteProgrammableSpeakerForEveryoneResponse = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandUnmuteRequest = {
    /**
     * The username to unmute.
     */
    username?: string;
};

export type Factorioapiv1CommandUnmuteResponse = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandVersionResponse = {
    /**
     * The version of the current Factorio game server.
     */
    version?: string;
};

export type Factorioapiv1CommandWhisperRequest = {
    /**
     * The message to whisper.
     */
    message?: string;
    /**
     * The username to whisper.
     */
    username?: string;
};

export type Factorioapiv1CommandWhisperResponse = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandWhitelistAddRequest = {
    /**
     * The username to add to the whitelist.
     */
    username?: string;
};

export type Factorioapiv1CommandWhitelistAddResponse = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandWhitelistClearRequest = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandWhitelistClearResponse = {
    [key: string]: unknown;
};

export type Factorioapiv1CommandWhitelistGetResponse = {
    /**
     * The list of whitelist.
     */
    whitelist?: Array<Factorioapiv1Player>;
};

export type Factorioapiv1CommandWhitelistRemoveRequest = {
    /**
     * The username to remove from the whitelist.
     */
    username?: string;
};

export type Factorioapiv1CommandWhitelistRemoveResponse = {
    [key: string]: unknown;
};

export type Factorioapiv1Player = {
    /**
     * Whether the admin is online.
     */
    online?: boolean;
    /**
     * The username of the admin.
     */
    username?: string;
};

export type Factorioapiv2CommandAdminsResponse = {
    /**
     * The list of admins.
     */
    admins?: Array<Factorioapiv2Player>;
};

export type Factorioapiv2CommandAlertsResponse = {
    /**
     * The list of alerts.
     */
    alerts?: Array<string>;
};

export type Factorioapiv2CommandBanRequest = {
    /**
     * The username to ban.
     */
    username?: string;
};

export type Factorioapiv2CommandBanResponse = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandBansResponse = {
    /**
     * The list of bans.
     */
    bans?: Array<Factorioapiv2Player>;
};

export type Factorioapiv2CommandDemoteRequest = {
    /**
     * The username to demote.
     */
    username?: string;
};

export type Factorioapiv2CommandDemoteResponse = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandEnableResearchQueueRequest = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandEnableResearchQueueResponse = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandEvolutionResponse = {
    /**
     * The list of evolutions.
     */
    evolutions?: Array<V2Evolution>;
};

export type Factorioapiv2CommandIgnoreRequest = {
    /**
     * The username to ignore.
     */
    username?: string;
};

export type Factorioapiv2CommandIgnoreResponse = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandKickRequest = {
    /**
     * The reason for the kick.
     */
    reason?: string;
    /**
     * The username to kick.
     */
    username?: string;
};

export type Factorioapiv2CommandKickResponse = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandMessageRequest = {
    /**
     * The message to send.
     */
    message?: string;
};

export type Factorioapiv2CommandMessageResponse = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandMuteProgrammableSpeakerForEveryoneRequest = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandMuteProgrammableSpeakerForEveryoneResponse = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandMuteRequest = {
    /**
     * The username to mute.
     */
    username?: string;
};

export type Factorioapiv2CommandMuteResponse = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandMutesResponse = {
    /**
     * The list of mutes.
     */
    mutes?: Array<Factorioapiv2Player>;
};

export type Factorioapiv2CommandPermissionsAddPlayerRequest = {
    /**
     * The group to add.
     */
    group?: string;
    /**
     * The username to add.
     */
    username?: string;
};

export type Factorioapiv2CommandPermissionsAddPlayerResponse = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandPermissionsCreateGroupRequest = {
    /**
     * The group to create.
     */
    group?: string;
};

export type Factorioapiv2CommandPermissionsCreateGroupResponse = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandPermissionsDeleteGroupRequest = {
    /**
     * The group to delete.
     */
    group?: string;
};

export type Factorioapiv2CommandPermissionsDeleteGroupResponse = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandPermissionsEditGroupRequest = {
    /**
     * The action to take.
     */
    action?: string;
    /**
     * The group to edit.
     */
    group?: string;
    /**
     * The value to set.
     */
    value?: boolean;
};

export type Factorioapiv2CommandPermissionsEditGroupResponse = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandPermissionsGetPlayerGroupResponse = {
    /**
     * The list of groups.
     */
    groups?: Array<string>;
};

export type Factorioapiv2CommandPermissionsRemovePlayerGroupRequest = {
    /**
     * The group to remove.
     */
    group?: string;
    /**
     * The username to remove.
     */
    username?: string;
};

export type Factorioapiv2CommandPermissionsRemovePlayerGroupResponse = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandPermissionsRenameGroupRequest = {
    /**
     * The group to rename.
     */
    group?: string;
    /**
     * The new group name.
     */
    newGroup?: string;
};

export type Factorioapiv2CommandPermissionsRenameGroupResponse = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandPermissionsResponse = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandPlayersResponse = {
    /**
     * The list of players.
     */
    players?: Array<Factorioapiv2Player>;
};

export type Factorioapiv2CommandPromoteRequest = {
    /**
     * The username to promote.
     */
    username?: string;
};

export type Factorioapiv2CommandPromoteResponse = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandPurgeRequest = {
    /**
     * The username to purge.
     */
    username?: string;
};

export type Factorioapiv2CommandPurgeResponse = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandRawRequest = {
    /**
     * The input for the command. For example, it will be formatted and executed with `/c game.player.zoom=0.1`.
     */
    input?: string;
};

export type Factorioapiv2CommandRawResponse = {
    /**
     * The output from the command.
     */
    output?: string;
};

export type Factorioapiv2CommandResetTipsRequest = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandResetTipsResponse = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandSeedResponse = {
    /**
     * The map seed.
     */
    seed?: string;
};

export type Factorioapiv2CommandServerSaveRequest = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandServerSaveResponse = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandTimeResponse = {
    /**
     * Get info about how old the map is, in seconds.
     */
    time?: number;
};

export type Factorioapiv2CommandToggleActionLoggingRequest = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandToggleActionLoggingResponse = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandToggleHeavyModeRequest = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandToggleHeavyModeResponse = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandUnbanRequest = {
    /**
     * The username to unban.
     */
    username?: string;
};

export type Factorioapiv2CommandUnbanResponse = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandUnignoreRequest = {
    /**
     * The username to unignore.
     */
    username?: string;
};

export type Factorioapiv2CommandUnignoreResponse = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandUnlockShortcutBarRequest = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandUnlockShortcutBarResponse = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandUnlockTipsRequest = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandUnlockTipsResponse = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandUnmuteProgrammableSpeakerForEveryoneRequest = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandUnmuteProgrammableSpeakerForEveryoneResponse = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandUnmuteRequest = {
    /**
     * The username to unmute.
     */
    username?: string;
};

export type Factorioapiv2CommandUnmuteResponse = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandVersionResponse = {
    /**
     * The version of the current Factorio game server.
     */
    version?: string;
};

export type Factorioapiv2CommandWhisperRequest = {
    /**
     * The message to whisper.
     */
    message?: string;
    /**
     * The username to whisper.
     */
    username?: string;
};

export type Factorioapiv2CommandWhisperResponse = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandWhitelistAddRequest = {
    /**
     * The username to add to the whitelist.
     */
    username?: string;
};

export type Factorioapiv2CommandWhitelistAddResponse = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandWhitelistClearRequest = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandWhitelistClearResponse = {
    [key: string]: unknown;
};

export type Factorioapiv2CommandWhitelistGetResponse = {
    /**
     * The list of whitelist.
     */
    whitelist?: Array<Factorioapiv2Player>;
};

export type Factorioapiv2CommandWhitelistRemoveRequest = {
    /**
     * The username to remove from the whitelist.
     */
    username?: string;
};

export type Factorioapiv2CommandWhitelistRemoveResponse = {
    [key: string]: unknown;
};

export type Factorioapiv2Player = {
    /**
     * Whether the admin is online.
     */
    online?: boolean;
    /**
     * The username of the admin.
     */
    username?: string;
};

export type JsonapiErrorObject = {
    /**
     * an application-specific error code, expressed as a string value.
     */
    code?: string;
    /**
     * a human-readable explanation specific to this occurrence of the problem. Like title.
     */
    detail?: string;
    /**
     * a unique identifier for this particular occurrence of the problem.
     */
    id?: string;
    links?: JsonapiLinks;
    /**
     * a meta object containing non-standard meta-information about the error.
     */
    meta?: {
        [key: string]: ProtobufAny;
    };
    source?: JsonapiErrorObjectSource;
    /**
     * the HTTP status code applicable to this problem, expressed as a string value.
     */
    status?: number;
    title?: string;
};

export type JsonapiErrorObjectSource = {
    /**
     * a string indicating the name of a single request header which caused the error.
     */
    header?: string;
    /**
     * a string indicating which URI query parameter caused the error.
     */
    parameter?: string;
    /**
     * a JSON Pointer [RFC6901] to the value in the request document that caused the error
     * [e.g. "/data" for a primary data object, or "/data/attributes/title" for a specific attribute].
     */
    pointer?: string;
};

/**
 * Where specified, a links member can be used to represent links.
 */
export type JsonapiLinks = {
    /**
     * a link to a description document (e.g. OpenAPI or JSON Schema) for the link target.
     */
    describedby?: string;
    /**
     * a string whose value is a URI-reference [RFC3986 Section 4.1] pointing to the link’s target.
     */
    href?: string;
    /**
     * a string or an array of strings indicating the language(s) of the link’s target.
     * An array of strings indicates that the link’s target is available in multiple languages.
     */
    hreflang?: string;
    /**
     * a meta object containing non-standard meta-information about the link.
     */
    meta?: {
        [key: string]: ProtobufAny;
    };
    /**
     * a string indicating the link’s relation type.
     */
    rel?: string;
    /**
     * a string which serves as a label for the destination of a link
     * such that it can be used as a human-readable identifier (e.g., a menu entry).
     */
    title?: string;
    /**
     * a string indicating the media type of the link’s target.
     */
    type?: string;
};

/**
 * `Any` contains an arbitrary serialized protocol buffer message along with a
 * URL that describes the type of the serialized message.
 *
 * Protobuf library provides support to pack/unpack Any values in the form
 * of utility functions or additional generated methods of the Any type.
 *
 * Example 1: Pack and unpack a message in C++.
 *
 * Foo foo = ...;
 * Any any;
 * any.PackFrom(foo);
 * ...
 * if (any.UnpackTo(&foo)) {
 * ...
 * }
 *
 * Example 2: Pack and unpack a message in Java.
 *
 * Foo foo = ...;
 * Any any = Any.pack(foo);
 * ...
 * if (any.is(Foo.class)) {
 * foo = any.unpack(Foo.class);
 * }
 * // or ...
 * if (any.isSameTypeAs(Foo.getDefaultInstance())) {
 * foo = any.unpack(Foo.getDefaultInstance());
 * }
 *
 * Example 3: Pack and unpack a message in Python.
 *
 * foo = Foo(...)
 * any = Any()
 * any.Pack(foo)
 * ...
 * if any.Is(Foo.DESCRIPTOR):
 * any.Unpack(foo)
 * ...
 *
 * Example 4: Pack and unpack a message in Go
 *
 * foo := &pb.Foo{...}
 * any, err := anypb.New(foo)
 * if err != nil {
 * ...
 * }
 * ...
 * foo := &pb.Foo{}
 * if err := any.UnmarshalTo(foo); err != nil {
 * ...
 * }
 *
 * The pack methods provided by protobuf library will by default use
 * 'type.googleapis.com/full.type.name' as the type URL and the unpack
 * methods only use the fully qualified type name after the last '/'
 * in the type URL, for example "foo.bar.com/x/y.z" will yield type
 * name "y.z".
 *
 * JSON
 * ====
 * The JSON representation of an `Any` value uses the regular
 * representation of the deserialized, embedded message, with an
 * additional field `@type` which contains the type URL. Example:
 *
 * package google.profile;
 * message Person {
 * string first_name = 1;
 * string last_name = 2;
 * }
 *
 * {
 * "@type": "type.googleapis.com/google.profile.Person",
 * "firstName": <string>,
 * "lastName": <string>
 * }
 *
 * If the embedded message type is well-known and has a custom JSON
 * representation, that representation will be embedded adding a field
 * `value` which holds the custom JSON in addition to the `@type`
 * field. Example (for message [google.protobuf.Duration][]):
 *
 * {
 * "@type": "type.googleapis.com/google.protobuf.Duration",
 * "value": "1.212s"
 * }
 */
export type ProtobufAny = {
    /**
     * A URL/resource name that uniquely identifies the type of the serialized
     * protocol buffer message. This string must contain at least
     * one "/" character. The last segment of the URL's path must represent
     * the fully qualified name of the type (as in
     * `path/google.protobuf.Duration`). The name should be in a canonical form
     * (e.g., leading "." is not accepted).
     *
     * In practice, teams usually precompile into the binary all types that they
     * expect it to use in the context of Any. However, for URLs which use the
     * scheme `http`, `https`, or no scheme, one can optionally set up a type
     * server that maps type URLs to message definitions as follows:
     *
     * * If no scheme is provided, `https` is assumed.
     * * An HTTP GET on the URL must yield a [google.protobuf.Type][]
     * value in binary format, or produce an error.
     * * Applications are allowed to cache lookup results based on the
     * URL, or have them precompiled into a binary to avoid any
     * lookup. Therefore, binary compatibility needs to be preserved
     * on changes to types. (Use versioned type names to manage
     * breaking changes.)
     *
     * Note: this functionality is not currently available in the official
     * protobuf release, and it is not used for type URLs beginning with
     * type.googleapis.com. As of May 2023, there are no widely used type server
     * implementations and no plans to implement one.
     *
     * Schemes other than `http`, `https` (or the empty scheme) might be
     * used with implementation specific semantics.
     */
    '@type'?: string;
    [key: string]: unknown | string | undefined;
};

export type V2CommandEvolutionGetResponse = {
    evolution?: V2Evolution;
};

export type V2Evolution = {
    /**
     * The current alien evolution factor.
     */
    evolutionFactor?: number;
    pollution?: number;
    spawnerKills?: number;
    surfaceName?: string;
    time?: number;
};

export type V1FactorioConsoleCommandAdminsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/admins';
};

export type V1FactorioConsoleCommandAdminsGetErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandAdminsGetError = V1FactorioConsoleCommandAdminsGetErrors[keyof V1FactorioConsoleCommandAdminsGetErrors];

export type V1FactorioConsoleCommandAdminsGetResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandAdminsResponse;
};

export type V1FactorioConsoleCommandAdminsGetResponse = V1FactorioConsoleCommandAdminsGetResponses[keyof V1FactorioConsoleCommandAdminsGetResponses];

export type V1FactorioConsoleCommandAlertsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/alerts';
};

export type V1FactorioConsoleCommandAlertsGetErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandAlertsGetError = V1FactorioConsoleCommandAlertsGetErrors[keyof V1FactorioConsoleCommandAlertsGetErrors];

export type V1FactorioConsoleCommandAlertsGetResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandAlertsResponse;
};

export type V1FactorioConsoleCommandAlertsGetResponse = V1FactorioConsoleCommandAlertsGetResponses[keyof V1FactorioConsoleCommandAlertsGetResponses];

export type V1FactorioConsoleCommandBanPostData = {
    body: Factorioapiv1CommandBanRequest;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/ban';
};

export type V1FactorioConsoleCommandBanPostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandBanPostError = V1FactorioConsoleCommandBanPostErrors[keyof V1FactorioConsoleCommandBanPostErrors];

export type V1FactorioConsoleCommandBanPostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandBanResponse;
};

export type V1FactorioConsoleCommandBanPostResponse = V1FactorioConsoleCommandBanPostResponses[keyof V1FactorioConsoleCommandBanPostResponses];

export type V1FactorioConsoleCommandBansGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/bans';
};

export type V1FactorioConsoleCommandBansGetErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandBansGetError = V1FactorioConsoleCommandBansGetErrors[keyof V1FactorioConsoleCommandBansGetErrors];

export type V1FactorioConsoleCommandBansGetResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandBansResponse;
};

export type V1FactorioConsoleCommandBansGetResponse = V1FactorioConsoleCommandBansGetResponses[keyof V1FactorioConsoleCommandBansGetResponses];

export type V1FactorioConsoleCommandDemotePostData = {
    body: Factorioapiv1CommandDemoteRequest;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/demote';
};

export type V1FactorioConsoleCommandDemotePostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandDemotePostError = V1FactorioConsoleCommandDemotePostErrors[keyof V1FactorioConsoleCommandDemotePostErrors];

export type V1FactorioConsoleCommandDemotePostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandDemoteResponse;
};

export type V1FactorioConsoleCommandDemotePostResponse = V1FactorioConsoleCommandDemotePostResponses[keyof V1FactorioConsoleCommandDemotePostResponses];

export type V1FactorioConsoleCommandEnableResearchQueuePostData = {
    body: Factorioapiv1CommandEnableResearchQueueRequest;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/enable-research-queue';
};

export type V1FactorioConsoleCommandEnableResearchQueuePostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandEnableResearchQueuePostError = V1FactorioConsoleCommandEnableResearchQueuePostErrors[keyof V1FactorioConsoleCommandEnableResearchQueuePostErrors];

export type V1FactorioConsoleCommandEnableResearchQueuePostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandEnableResearchQueueResponse;
};

export type V1FactorioConsoleCommandEnableResearchQueuePostResponse = V1FactorioConsoleCommandEnableResearchQueuePostResponses[keyof V1FactorioConsoleCommandEnableResearchQueuePostResponses];

export type V1FactorioConsoleCommandEvolutionGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/evolution';
};

export type V1FactorioConsoleCommandEvolutionGetErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandEvolutionGetError = V1FactorioConsoleCommandEvolutionGetErrors[keyof V1FactorioConsoleCommandEvolutionGetErrors];

export type V1FactorioConsoleCommandEvolutionGetResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandEvolutionResponse;
};

export type V1FactorioConsoleCommandEvolutionGetResponse = V1FactorioConsoleCommandEvolutionGetResponses[keyof V1FactorioConsoleCommandEvolutionGetResponses];

export type V1FactorioConsoleCommandIgnorePostData = {
    body: Factorioapiv1CommandIgnoreRequest;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/ignore';
};

export type V1FactorioConsoleCommandIgnorePostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandIgnorePostError = V1FactorioConsoleCommandIgnorePostErrors[keyof V1FactorioConsoleCommandIgnorePostErrors];

export type V1FactorioConsoleCommandIgnorePostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandIgnoreResponse;
};

export type V1FactorioConsoleCommandIgnorePostResponse = V1FactorioConsoleCommandIgnorePostResponses[keyof V1FactorioConsoleCommandIgnorePostResponses];

export type V1FactorioConsoleCommandKickPostData = {
    body: Factorioapiv1CommandKickRequest;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/kick';
};

export type V1FactorioConsoleCommandKickPostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandKickPostError = V1FactorioConsoleCommandKickPostErrors[keyof V1FactorioConsoleCommandKickPostErrors];

export type V1FactorioConsoleCommandKickPostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandKickResponse;
};

export type V1FactorioConsoleCommandKickPostResponse = V1FactorioConsoleCommandKickPostResponses[keyof V1FactorioConsoleCommandKickPostResponses];

export type V1FactorioConsoleCommandMessagePostData = {
    body: Factorioapiv1CommandMessageRequest;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/message';
};

export type V1FactorioConsoleCommandMessagePostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandMessagePostError = V1FactorioConsoleCommandMessagePostErrors[keyof V1FactorioConsoleCommandMessagePostErrors];

export type V1FactorioConsoleCommandMessagePostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandMessageResponse;
};

export type V1FactorioConsoleCommandMessagePostResponse = V1FactorioConsoleCommandMessagePostResponses[keyof V1FactorioConsoleCommandMessagePostResponses];

export type V1FactorioConsoleCommandMutePostData = {
    body: Factorioapiv1CommandMuteRequest;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/mute';
};

export type V1FactorioConsoleCommandMutePostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandMutePostError = V1FactorioConsoleCommandMutePostErrors[keyof V1FactorioConsoleCommandMutePostErrors];

export type V1FactorioConsoleCommandMutePostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandMuteResponse;
};

export type V1FactorioConsoleCommandMutePostResponse = V1FactorioConsoleCommandMutePostResponses[keyof V1FactorioConsoleCommandMutePostResponses];

export type V1FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostData = {
    body: Factorioapiv1CommandMuteProgrammableSpeakerForEveryoneRequest;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/mute-programmable-speaker-for-everyone';
};

export type V1FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostError = V1FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostErrors[keyof V1FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostErrors];

export type V1FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandMuteProgrammableSpeakerForEveryoneResponse;
};

export type V1FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostResponse = V1FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostResponses[keyof V1FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostResponses];

export type V1FactorioConsoleCommandMutesGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/mutes';
};

export type V1FactorioConsoleCommandMutesGetErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandMutesGetError = V1FactorioConsoleCommandMutesGetErrors[keyof V1FactorioConsoleCommandMutesGetErrors];

export type V1FactorioConsoleCommandMutesGetResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandMutesResponse;
};

export type V1FactorioConsoleCommandMutesGetResponse = V1FactorioConsoleCommandMutesGetResponses[keyof V1FactorioConsoleCommandMutesGetResponses];

export type V1FactorioConsoleCommandPermissionsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/permissions';
};

export type V1FactorioConsoleCommandPermissionsGetErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandPermissionsGetError = V1FactorioConsoleCommandPermissionsGetErrors[keyof V1FactorioConsoleCommandPermissionsGetErrors];

export type V1FactorioConsoleCommandPermissionsGetResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandPermissionsResponse;
};

export type V1FactorioConsoleCommandPermissionsGetResponse = V1FactorioConsoleCommandPermissionsGetResponses[keyof V1FactorioConsoleCommandPermissionsGetResponses];

export type V1FactorioConsoleCommandPermissionsGroupDeleteData = {
    body: Factorioapiv1CommandPermissionsDeleteGroupRequest;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/permissions/group';
};

export type V1FactorioConsoleCommandPermissionsGroupDeleteErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandPermissionsGroupDeleteError = V1FactorioConsoleCommandPermissionsGroupDeleteErrors[keyof V1FactorioConsoleCommandPermissionsGroupDeleteErrors];

export type V1FactorioConsoleCommandPermissionsGroupDeleteResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandPermissionsDeleteGroupResponse;
};

export type V1FactorioConsoleCommandPermissionsGroupDeleteResponse = V1FactorioConsoleCommandPermissionsGroupDeleteResponses[keyof V1FactorioConsoleCommandPermissionsGroupDeleteResponses];

export type V1FactorioConsoleCommandPermissionsGroupPatchData = {
    body: Factorioapiv1CommandPermissionsEditGroupRequest;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/permissions/group';
};

export type V1FactorioConsoleCommandPermissionsGroupPatchErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandPermissionsGroupPatchError = V1FactorioConsoleCommandPermissionsGroupPatchErrors[keyof V1FactorioConsoleCommandPermissionsGroupPatchErrors];

export type V1FactorioConsoleCommandPermissionsGroupPatchResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandPermissionsEditGroupResponse;
};

export type V1FactorioConsoleCommandPermissionsGroupPatchResponse = V1FactorioConsoleCommandPermissionsGroupPatchResponses[keyof V1FactorioConsoleCommandPermissionsGroupPatchResponses];

export type V1FactorioConsoleCommandPermissionsGroupPostData = {
    body: Factorioapiv1CommandPermissionsCreateGroupRequest;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/permissions/group';
};

export type V1FactorioConsoleCommandPermissionsGroupPostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandPermissionsGroupPostError = V1FactorioConsoleCommandPermissionsGroupPostErrors[keyof V1FactorioConsoleCommandPermissionsGroupPostErrors];

export type V1FactorioConsoleCommandPermissionsGroupPostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandPermissionsCreateGroupResponse;
};

export type V1FactorioConsoleCommandPermissionsGroupPostResponse = V1FactorioConsoleCommandPermissionsGroupPostResponses[keyof V1FactorioConsoleCommandPermissionsGroupPostResponses];

export type V1FactorioConsoleCommandPermissionsGroupPutData = {
    body: Factorioapiv1CommandPermissionsRenameGroupRequest;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/permissions/group';
};

export type V1FactorioConsoleCommandPermissionsGroupPutErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandPermissionsGroupPutError = V1FactorioConsoleCommandPermissionsGroupPutErrors[keyof V1FactorioConsoleCommandPermissionsGroupPutErrors];

export type V1FactorioConsoleCommandPermissionsGroupPutResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandPermissionsRenameGroupResponse;
};

export type V1FactorioConsoleCommandPermissionsGroupPutResponse = V1FactorioConsoleCommandPermissionsGroupPutResponses[keyof V1FactorioConsoleCommandPermissionsGroupPutResponses];

export type V1FactorioConsoleCommandPermissionsGroupPlayerDeleteData = {
    body: Factorioapiv1CommandPermissionsRemovePlayerGroupRequest;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/permissions/group/player';
};

export type V1FactorioConsoleCommandPermissionsGroupPlayerDeleteErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandPermissionsGroupPlayerDeleteError = V1FactorioConsoleCommandPermissionsGroupPlayerDeleteErrors[keyof V1FactorioConsoleCommandPermissionsGroupPlayerDeleteErrors];

export type V1FactorioConsoleCommandPermissionsGroupPlayerDeleteResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandPermissionsRemovePlayerGroupResponse;
};

export type V1FactorioConsoleCommandPermissionsGroupPlayerDeleteResponse = V1FactorioConsoleCommandPermissionsGroupPlayerDeleteResponses[keyof V1FactorioConsoleCommandPermissionsGroupPlayerDeleteResponses];

export type V1FactorioConsoleCommandPermissionsGroupPlayerPostData = {
    body: Factorioapiv1CommandPermissionsAddPlayerRequest;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/permissions/group/player';
};

export type V1FactorioConsoleCommandPermissionsGroupPlayerPostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandPermissionsGroupPlayerPostError = V1FactorioConsoleCommandPermissionsGroupPlayerPostErrors[keyof V1FactorioConsoleCommandPermissionsGroupPlayerPostErrors];

export type V1FactorioConsoleCommandPermissionsGroupPlayerPostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandPermissionsAddPlayerResponse;
};

export type V1FactorioConsoleCommandPermissionsGroupPlayerPostResponse = V1FactorioConsoleCommandPermissionsGroupPlayerPostResponses[keyof V1FactorioConsoleCommandPermissionsGroupPlayerPostResponses];

export type V1FactorioConsoleCommandPermissionsGroupPlayersGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The username to get the groups for.
         */
        username?: string;
    };
    url: '/api/v1/factorio/console/command/permissions/group/players';
};

export type V1FactorioConsoleCommandPermissionsGroupPlayersGetErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandPermissionsGroupPlayersGetError = V1FactorioConsoleCommandPermissionsGroupPlayersGetErrors[keyof V1FactorioConsoleCommandPermissionsGroupPlayersGetErrors];

export type V1FactorioConsoleCommandPermissionsGroupPlayersGetResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandPermissionsGetPlayerGroupResponse;
};

export type V1FactorioConsoleCommandPermissionsGroupPlayersGetResponse = V1FactorioConsoleCommandPermissionsGroupPlayersGetResponses[keyof V1FactorioConsoleCommandPermissionsGroupPlayersGetResponses];

export type V1FactorioConsoleCommandPlayersGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/players';
};

export type V1FactorioConsoleCommandPlayersGetErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandPlayersGetError = V1FactorioConsoleCommandPlayersGetErrors[keyof V1FactorioConsoleCommandPlayersGetErrors];

export type V1FactorioConsoleCommandPlayersGetResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandPlayersResponse;
};

export type V1FactorioConsoleCommandPlayersGetResponse = V1FactorioConsoleCommandPlayersGetResponses[keyof V1FactorioConsoleCommandPlayersGetResponses];

export type V1FactorioConsoleCommandPromotePostData = {
    body: Factorioapiv1CommandPromoteRequest;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/promote';
};

export type V1FactorioConsoleCommandPromotePostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandPromotePostError = V1FactorioConsoleCommandPromotePostErrors[keyof V1FactorioConsoleCommandPromotePostErrors];

export type V1FactorioConsoleCommandPromotePostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandPromoteResponse;
};

export type V1FactorioConsoleCommandPromotePostResponse = V1FactorioConsoleCommandPromotePostResponses[keyof V1FactorioConsoleCommandPromotePostResponses];

export type V1FactorioConsoleCommandPurgePostData = {
    body: Factorioapiv1CommandPurgeRequest;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/purge';
};

export type V1FactorioConsoleCommandPurgePostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandPurgePostError = V1FactorioConsoleCommandPurgePostErrors[keyof V1FactorioConsoleCommandPurgePostErrors];

export type V1FactorioConsoleCommandPurgePostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandPurgeResponse;
};

export type V1FactorioConsoleCommandPurgePostResponse = V1FactorioConsoleCommandPurgePostResponses[keyof V1FactorioConsoleCommandPurgePostResponses];

export type V1FactorioConsoleCommandRawPostData = {
    body: Factorioapiv1CommandRawRequest;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/raw';
};

export type V1FactorioConsoleCommandRawPostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandRawPostError = V1FactorioConsoleCommandRawPostErrors[keyof V1FactorioConsoleCommandRawPostErrors];

export type V1FactorioConsoleCommandRawPostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandRawResponse;
};

export type V1FactorioConsoleCommandRawPostResponse = V1FactorioConsoleCommandRawPostResponses[keyof V1FactorioConsoleCommandRawPostResponses];

export type V1FactorioConsoleCommandResetTipsPostData = {
    body: Factorioapiv1CommandResetTipsRequest;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/reset-tips';
};

export type V1FactorioConsoleCommandResetTipsPostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandResetTipsPostError = V1FactorioConsoleCommandResetTipsPostErrors[keyof V1FactorioConsoleCommandResetTipsPostErrors];

export type V1FactorioConsoleCommandResetTipsPostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandResetTipsResponse;
};

export type V1FactorioConsoleCommandResetTipsPostResponse = V1FactorioConsoleCommandResetTipsPostResponses[keyof V1FactorioConsoleCommandResetTipsPostResponses];

export type V1FactorioConsoleCommandSeedGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/seed';
};

export type V1FactorioConsoleCommandSeedGetErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandSeedGetError = V1FactorioConsoleCommandSeedGetErrors[keyof V1FactorioConsoleCommandSeedGetErrors];

export type V1FactorioConsoleCommandSeedGetResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandSeedResponse;
};

export type V1FactorioConsoleCommandSeedGetResponse = V1FactorioConsoleCommandSeedGetResponses[keyof V1FactorioConsoleCommandSeedGetResponses];

export type V1FactorioConsoleCommandServerSavePostData = {
    body: Factorioapiv1CommandServerSaveRequest;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/server-save';
};

export type V1FactorioConsoleCommandServerSavePostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandServerSavePostError = V1FactorioConsoleCommandServerSavePostErrors[keyof V1FactorioConsoleCommandServerSavePostErrors];

export type V1FactorioConsoleCommandServerSavePostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandServerSaveResponse;
};

export type V1FactorioConsoleCommandServerSavePostResponse = V1FactorioConsoleCommandServerSavePostResponses[keyof V1FactorioConsoleCommandServerSavePostResponses];

export type V1FactorioConsoleCommandTimeGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/time';
};

export type V1FactorioConsoleCommandTimeGetErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandTimeGetError = V1FactorioConsoleCommandTimeGetErrors[keyof V1FactorioConsoleCommandTimeGetErrors];

export type V1FactorioConsoleCommandTimeGetResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandTimeResponse;
};

export type V1FactorioConsoleCommandTimeGetResponse = V1FactorioConsoleCommandTimeGetResponses[keyof V1FactorioConsoleCommandTimeGetResponses];

export type V1FactorioConsoleCommandToggleActionLoggingPostData = {
    body: Factorioapiv1CommandToggleActionLoggingRequest;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/toggle-action-logging';
};

export type V1FactorioConsoleCommandToggleActionLoggingPostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandToggleActionLoggingPostError = V1FactorioConsoleCommandToggleActionLoggingPostErrors[keyof V1FactorioConsoleCommandToggleActionLoggingPostErrors];

export type V1FactorioConsoleCommandToggleActionLoggingPostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandToggleActionLoggingResponse;
};

export type V1FactorioConsoleCommandToggleActionLoggingPostResponse = V1FactorioConsoleCommandToggleActionLoggingPostResponses[keyof V1FactorioConsoleCommandToggleActionLoggingPostResponses];

export type V1FactorioConsoleCommandToggleHeavyModePostData = {
    body: Factorioapiv1CommandToggleHeavyModeRequest;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/toggle-heavy-mode';
};

export type V1FactorioConsoleCommandToggleHeavyModePostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandToggleHeavyModePostError = V1FactorioConsoleCommandToggleHeavyModePostErrors[keyof V1FactorioConsoleCommandToggleHeavyModePostErrors];

export type V1FactorioConsoleCommandToggleHeavyModePostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandToggleHeavyModeResponse;
};

export type V1FactorioConsoleCommandToggleHeavyModePostResponse = V1FactorioConsoleCommandToggleHeavyModePostResponses[keyof V1FactorioConsoleCommandToggleHeavyModePostResponses];

export type V1FactorioConsoleCommandUnbanPostData = {
    body: Factorioapiv1CommandUnbanRequest;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/unban';
};

export type V1FactorioConsoleCommandUnbanPostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandUnbanPostError = V1FactorioConsoleCommandUnbanPostErrors[keyof V1FactorioConsoleCommandUnbanPostErrors];

export type V1FactorioConsoleCommandUnbanPostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandUnbanResponse;
};

export type V1FactorioConsoleCommandUnbanPostResponse = V1FactorioConsoleCommandUnbanPostResponses[keyof V1FactorioConsoleCommandUnbanPostResponses];

export type V1FactorioConsoleCommandUnignorePostData = {
    body: Factorioapiv1CommandUnignoreRequest;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/unignore';
};

export type V1FactorioConsoleCommandUnignorePostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandUnignorePostError = V1FactorioConsoleCommandUnignorePostErrors[keyof V1FactorioConsoleCommandUnignorePostErrors];

export type V1FactorioConsoleCommandUnignorePostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandUnignoreResponse;
};

export type V1FactorioConsoleCommandUnignorePostResponse = V1FactorioConsoleCommandUnignorePostResponses[keyof V1FactorioConsoleCommandUnignorePostResponses];

export type V1FactorioConsoleCommandUnlockShortcutBarPostData = {
    body: Factorioapiv1CommandUnlockShortcutBarRequest;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/unlock-shortcut-bar';
};

export type V1FactorioConsoleCommandUnlockShortcutBarPostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandUnlockShortcutBarPostError = V1FactorioConsoleCommandUnlockShortcutBarPostErrors[keyof V1FactorioConsoleCommandUnlockShortcutBarPostErrors];

export type V1FactorioConsoleCommandUnlockShortcutBarPostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandUnlockShortcutBarResponse;
};

export type V1FactorioConsoleCommandUnlockShortcutBarPostResponse = V1FactorioConsoleCommandUnlockShortcutBarPostResponses[keyof V1FactorioConsoleCommandUnlockShortcutBarPostResponses];

export type V1FactorioConsoleCommandUnlockTipsPostData = {
    body: Factorioapiv1CommandUnlockTipsRequest;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/unlock-tips';
};

export type V1FactorioConsoleCommandUnlockTipsPostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandUnlockTipsPostError = V1FactorioConsoleCommandUnlockTipsPostErrors[keyof V1FactorioConsoleCommandUnlockTipsPostErrors];

export type V1FactorioConsoleCommandUnlockTipsPostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandUnlockTipsResponse;
};

export type V1FactorioConsoleCommandUnlockTipsPostResponse = V1FactorioConsoleCommandUnlockTipsPostResponses[keyof V1FactorioConsoleCommandUnlockTipsPostResponses];

export type V1FactorioConsoleCommandUnmutePostData = {
    body: Factorioapiv1CommandUnmuteRequest;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/unmute';
};

export type V1FactorioConsoleCommandUnmutePostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandUnmutePostError = V1FactorioConsoleCommandUnmutePostErrors[keyof V1FactorioConsoleCommandUnmutePostErrors];

export type V1FactorioConsoleCommandUnmutePostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandUnmuteResponse;
};

export type V1FactorioConsoleCommandUnmutePostResponse = V1FactorioConsoleCommandUnmutePostResponses[keyof V1FactorioConsoleCommandUnmutePostResponses];

export type V1FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostData = {
    body: Factorioapiv1CommandUnmuteProgrammableSpeakerForEveryoneRequest;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/unmute-programmable-speaker-for-everyone';
};

export type V1FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostError = V1FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostErrors[keyof V1FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostErrors];

export type V1FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandUnmuteProgrammableSpeakerForEveryoneResponse;
};

export type V1FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostResponse = V1FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostResponses[keyof V1FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostResponses];

export type V1FactorioConsoleCommandVersionGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/version';
};

export type V1FactorioConsoleCommandVersionGetErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandVersionGetError = V1FactorioConsoleCommandVersionGetErrors[keyof V1FactorioConsoleCommandVersionGetErrors];

export type V1FactorioConsoleCommandVersionGetResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandVersionResponse;
};

export type V1FactorioConsoleCommandVersionGetResponse = V1FactorioConsoleCommandVersionGetResponses[keyof V1FactorioConsoleCommandVersionGetResponses];

export type V1FactorioConsoleCommandWhisperPostData = {
    body: Factorioapiv1CommandWhisperRequest;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/whisper';
};

export type V1FactorioConsoleCommandWhisperPostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandWhisperPostError = V1FactorioConsoleCommandWhisperPostErrors[keyof V1FactorioConsoleCommandWhisperPostErrors];

export type V1FactorioConsoleCommandWhisperPostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandWhisperResponse;
};

export type V1FactorioConsoleCommandWhisperPostResponse = V1FactorioConsoleCommandWhisperPostResponses[keyof V1FactorioConsoleCommandWhisperPostResponses];

export type V1FactorioConsoleCommandWhitelistDeleteData = {
    body: Factorioapiv1CommandWhitelistClearRequest;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/whitelist';
};

export type V1FactorioConsoleCommandWhitelistDeleteErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandWhitelistDeleteError = V1FactorioConsoleCommandWhitelistDeleteErrors[keyof V1FactorioConsoleCommandWhitelistDeleteErrors];

export type V1FactorioConsoleCommandWhitelistDeleteResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandWhitelistClearResponse;
};

export type V1FactorioConsoleCommandWhitelistDeleteResponse = V1FactorioConsoleCommandWhitelistDeleteResponses[keyof V1FactorioConsoleCommandWhitelistDeleteResponses];

export type V1FactorioConsoleCommandWhitelistGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/whitelist';
};

export type V1FactorioConsoleCommandWhitelistGetErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandWhitelistGetError = V1FactorioConsoleCommandWhitelistGetErrors[keyof V1FactorioConsoleCommandWhitelistGetErrors];

export type V1FactorioConsoleCommandWhitelistGetResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandWhitelistGetResponse;
};

export type V1FactorioConsoleCommandWhitelistGetResponse = V1FactorioConsoleCommandWhitelistGetResponses[keyof V1FactorioConsoleCommandWhitelistGetResponses];

export type V1FactorioConsoleCommandWhitelistPatchData = {
    body: Factorioapiv1CommandWhitelistRemoveRequest;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/whitelist';
};

export type V1FactorioConsoleCommandWhitelistPatchErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandWhitelistPatchError = V1FactorioConsoleCommandWhitelistPatchErrors[keyof V1FactorioConsoleCommandWhitelistPatchErrors];

export type V1FactorioConsoleCommandWhitelistPatchResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandWhitelistRemoveResponse;
};

export type V1FactorioConsoleCommandWhitelistPatchResponse = V1FactorioConsoleCommandWhitelistPatchResponses[keyof V1FactorioConsoleCommandWhitelistPatchResponses];

export type V1FactorioConsoleCommandWhitelistPostData = {
    body: Factorioapiv1CommandWhitelistAddRequest;
    path?: never;
    query?: never;
    url: '/api/v1/factorio/console/command/whitelist';
};

export type V1FactorioConsoleCommandWhitelistPostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V1FactorioConsoleCommandWhitelistPostError = V1FactorioConsoleCommandWhitelistPostErrors[keyof V1FactorioConsoleCommandWhitelistPostErrors];

export type V1FactorioConsoleCommandWhitelistPostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv1CommandWhitelistAddResponse;
};

export type V1FactorioConsoleCommandWhitelistPostResponse = V1FactorioConsoleCommandWhitelistPostResponses[keyof V1FactorioConsoleCommandWhitelistPostResponses];

export type V2FactorioConsoleCommandAdminsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/admins';
};

export type V2FactorioConsoleCommandAdminsGetErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandAdminsGetError = V2FactorioConsoleCommandAdminsGetErrors[keyof V2FactorioConsoleCommandAdminsGetErrors];

export type V2FactorioConsoleCommandAdminsGetResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandAdminsResponse;
};

export type V2FactorioConsoleCommandAdminsGetResponse = V2FactorioConsoleCommandAdminsGetResponses[keyof V2FactorioConsoleCommandAdminsGetResponses];

export type V2FactorioConsoleCommandAlertsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/alerts';
};

export type V2FactorioConsoleCommandAlertsGetErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandAlertsGetError = V2FactorioConsoleCommandAlertsGetErrors[keyof V2FactorioConsoleCommandAlertsGetErrors];

export type V2FactorioConsoleCommandAlertsGetResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandAlertsResponse;
};

export type V2FactorioConsoleCommandAlertsGetResponse = V2FactorioConsoleCommandAlertsGetResponses[keyof V2FactorioConsoleCommandAlertsGetResponses];

export type V2FactorioConsoleCommandBanPostData = {
    body: Factorioapiv2CommandBanRequest;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/ban';
};

export type V2FactorioConsoleCommandBanPostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandBanPostError = V2FactorioConsoleCommandBanPostErrors[keyof V2FactorioConsoleCommandBanPostErrors];

export type V2FactorioConsoleCommandBanPostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandBanResponse;
};

export type V2FactorioConsoleCommandBanPostResponse = V2FactorioConsoleCommandBanPostResponses[keyof V2FactorioConsoleCommandBanPostResponses];

export type V2FactorioConsoleCommandBansGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/bans';
};

export type V2FactorioConsoleCommandBansGetErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandBansGetError = V2FactorioConsoleCommandBansGetErrors[keyof V2FactorioConsoleCommandBansGetErrors];

export type V2FactorioConsoleCommandBansGetResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandBansResponse;
};

export type V2FactorioConsoleCommandBansGetResponse = V2FactorioConsoleCommandBansGetResponses[keyof V2FactorioConsoleCommandBansGetResponses];

export type V2FactorioConsoleCommandDemotePostData = {
    body: Factorioapiv2CommandDemoteRequest;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/demote';
};

export type V2FactorioConsoleCommandDemotePostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandDemotePostError = V2FactorioConsoleCommandDemotePostErrors[keyof V2FactorioConsoleCommandDemotePostErrors];

export type V2FactorioConsoleCommandDemotePostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandDemoteResponse;
};

export type V2FactorioConsoleCommandDemotePostResponse = V2FactorioConsoleCommandDemotePostResponses[keyof V2FactorioConsoleCommandDemotePostResponses];

export type V2FactorioConsoleCommandEnableResearchQueuePostData = {
    body: Factorioapiv2CommandEnableResearchQueueRequest;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/enable-research-queue';
};

export type V2FactorioConsoleCommandEnableResearchQueuePostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandEnableResearchQueuePostError = V2FactorioConsoleCommandEnableResearchQueuePostErrors[keyof V2FactorioConsoleCommandEnableResearchQueuePostErrors];

export type V2FactorioConsoleCommandEnableResearchQueuePostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandEnableResearchQueueResponse;
};

export type V2FactorioConsoleCommandEnableResearchQueuePostResponse = V2FactorioConsoleCommandEnableResearchQueuePostResponses[keyof V2FactorioConsoleCommandEnableResearchQueuePostResponses];

export type V2FactorioConsoleCommandEvolutionGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/evolution';
};

export type V2FactorioConsoleCommandEvolutionGetErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandEvolutionGetError = V2FactorioConsoleCommandEvolutionGetErrors[keyof V2FactorioConsoleCommandEvolutionGetErrors];

export type V2FactorioConsoleCommandEvolutionGetResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandEvolutionResponse;
};

export type V2FactorioConsoleCommandEvolutionGetResponse = V2FactorioConsoleCommandEvolutionGetResponses[keyof V2FactorioConsoleCommandEvolutionGetResponses];

export type V2FactorioConsoleCommandEvolutionSurfaceNameGetData = {
    body?: never;
    path: {
        /**
         * The surface name
         */
        surfaceName: string;
    };
    query?: never;
    url: '/api/v2/factorio/console/command/evolution/{surfaceName}';
};

export type V2FactorioConsoleCommandEvolutionSurfaceNameGetErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandEvolutionSurfaceNameGetError = V2FactorioConsoleCommandEvolutionSurfaceNameGetErrors[keyof V2FactorioConsoleCommandEvolutionSurfaceNameGetErrors];

export type V2FactorioConsoleCommandEvolutionSurfaceNameGetResponses = {
    /**
     * A successful response.
     */
    200: V2CommandEvolutionGetResponse;
};

export type V2FactorioConsoleCommandEvolutionSurfaceNameGetResponse = V2FactorioConsoleCommandEvolutionSurfaceNameGetResponses[keyof V2FactorioConsoleCommandEvolutionSurfaceNameGetResponses];

export type V2FactorioConsoleCommandIgnorePostData = {
    body: Factorioapiv2CommandIgnoreRequest;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/ignore';
};

export type V2FactorioConsoleCommandIgnorePostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandIgnorePostError = V2FactorioConsoleCommandIgnorePostErrors[keyof V2FactorioConsoleCommandIgnorePostErrors];

export type V2FactorioConsoleCommandIgnorePostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandIgnoreResponse;
};

export type V2FactorioConsoleCommandIgnorePostResponse = V2FactorioConsoleCommandIgnorePostResponses[keyof V2FactorioConsoleCommandIgnorePostResponses];

export type V2FactorioConsoleCommandKickPostData = {
    body: Factorioapiv2CommandKickRequest;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/kick';
};

export type V2FactorioConsoleCommandKickPostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandKickPostError = V2FactorioConsoleCommandKickPostErrors[keyof V2FactorioConsoleCommandKickPostErrors];

export type V2FactorioConsoleCommandKickPostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandKickResponse;
};

export type V2FactorioConsoleCommandKickPostResponse = V2FactorioConsoleCommandKickPostResponses[keyof V2FactorioConsoleCommandKickPostResponses];

export type V2FactorioConsoleCommandMessagePostData = {
    body: Factorioapiv2CommandMessageRequest;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/message';
};

export type V2FactorioConsoleCommandMessagePostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandMessagePostError = V2FactorioConsoleCommandMessagePostErrors[keyof V2FactorioConsoleCommandMessagePostErrors];

export type V2FactorioConsoleCommandMessagePostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandMessageResponse;
};

export type V2FactorioConsoleCommandMessagePostResponse = V2FactorioConsoleCommandMessagePostResponses[keyof V2FactorioConsoleCommandMessagePostResponses];

export type V2FactorioConsoleCommandMutePostData = {
    body: Factorioapiv2CommandMuteRequest;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/mute';
};

export type V2FactorioConsoleCommandMutePostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandMutePostError = V2FactorioConsoleCommandMutePostErrors[keyof V2FactorioConsoleCommandMutePostErrors];

export type V2FactorioConsoleCommandMutePostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandMuteResponse;
};

export type V2FactorioConsoleCommandMutePostResponse = V2FactorioConsoleCommandMutePostResponses[keyof V2FactorioConsoleCommandMutePostResponses];

export type V2FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostData = {
    body: Factorioapiv2CommandMuteProgrammableSpeakerForEveryoneRequest;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/mute-programmable-speaker-for-everyone';
};

export type V2FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostError = V2FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostErrors[keyof V2FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostErrors];

export type V2FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandMuteProgrammableSpeakerForEveryoneResponse;
};

export type V2FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostResponse = V2FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostResponses[keyof V2FactorioConsoleCommandMuteProgrammableSpeakerForEveryonePostResponses];

export type V2FactorioConsoleCommandMutesGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/mutes';
};

export type V2FactorioConsoleCommandMutesGetErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandMutesGetError = V2FactorioConsoleCommandMutesGetErrors[keyof V2FactorioConsoleCommandMutesGetErrors];

export type V2FactorioConsoleCommandMutesGetResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandMutesResponse;
};

export type V2FactorioConsoleCommandMutesGetResponse = V2FactorioConsoleCommandMutesGetResponses[keyof V2FactorioConsoleCommandMutesGetResponses];

export type V2FactorioConsoleCommandPermissionsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/permissions';
};

export type V2FactorioConsoleCommandPermissionsGetErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandPermissionsGetError = V2FactorioConsoleCommandPermissionsGetErrors[keyof V2FactorioConsoleCommandPermissionsGetErrors];

export type V2FactorioConsoleCommandPermissionsGetResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandPermissionsResponse;
};

export type V2FactorioConsoleCommandPermissionsGetResponse = V2FactorioConsoleCommandPermissionsGetResponses[keyof V2FactorioConsoleCommandPermissionsGetResponses];

export type V2FactorioConsoleCommandPermissionsGroupDeleteData = {
    body: Factorioapiv2CommandPermissionsDeleteGroupRequest;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/permissions/group';
};

export type V2FactorioConsoleCommandPermissionsGroupDeleteErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandPermissionsGroupDeleteError = V2FactorioConsoleCommandPermissionsGroupDeleteErrors[keyof V2FactorioConsoleCommandPermissionsGroupDeleteErrors];

export type V2FactorioConsoleCommandPermissionsGroupDeleteResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandPermissionsDeleteGroupResponse;
};

export type V2FactorioConsoleCommandPermissionsGroupDeleteResponse = V2FactorioConsoleCommandPermissionsGroupDeleteResponses[keyof V2FactorioConsoleCommandPermissionsGroupDeleteResponses];

export type V2FactorioConsoleCommandPermissionsGroupPatchData = {
    body: Factorioapiv2CommandPermissionsEditGroupRequest;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/permissions/group';
};

export type V2FactorioConsoleCommandPermissionsGroupPatchErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandPermissionsGroupPatchError = V2FactorioConsoleCommandPermissionsGroupPatchErrors[keyof V2FactorioConsoleCommandPermissionsGroupPatchErrors];

export type V2FactorioConsoleCommandPermissionsGroupPatchResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandPermissionsEditGroupResponse;
};

export type V2FactorioConsoleCommandPermissionsGroupPatchResponse = V2FactorioConsoleCommandPermissionsGroupPatchResponses[keyof V2FactorioConsoleCommandPermissionsGroupPatchResponses];

export type V2FactorioConsoleCommandPermissionsGroupPostData = {
    body: Factorioapiv2CommandPermissionsCreateGroupRequest;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/permissions/group';
};

export type V2FactorioConsoleCommandPermissionsGroupPostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandPermissionsGroupPostError = V2FactorioConsoleCommandPermissionsGroupPostErrors[keyof V2FactorioConsoleCommandPermissionsGroupPostErrors];

export type V2FactorioConsoleCommandPermissionsGroupPostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandPermissionsCreateGroupResponse;
};

export type V2FactorioConsoleCommandPermissionsGroupPostResponse = V2FactorioConsoleCommandPermissionsGroupPostResponses[keyof V2FactorioConsoleCommandPermissionsGroupPostResponses];

export type V2FactorioConsoleCommandPermissionsGroupPutData = {
    body: Factorioapiv2CommandPermissionsRenameGroupRequest;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/permissions/group';
};

export type V2FactorioConsoleCommandPermissionsGroupPutErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandPermissionsGroupPutError = V2FactorioConsoleCommandPermissionsGroupPutErrors[keyof V2FactorioConsoleCommandPermissionsGroupPutErrors];

export type V2FactorioConsoleCommandPermissionsGroupPutResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandPermissionsRenameGroupResponse;
};

export type V2FactorioConsoleCommandPermissionsGroupPutResponse = V2FactorioConsoleCommandPermissionsGroupPutResponses[keyof V2FactorioConsoleCommandPermissionsGroupPutResponses];

export type V2FactorioConsoleCommandPermissionsGroupPlayerDeleteData = {
    body: Factorioapiv2CommandPermissionsRemovePlayerGroupRequest;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/permissions/group/player';
};

export type V2FactorioConsoleCommandPermissionsGroupPlayerDeleteErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandPermissionsGroupPlayerDeleteError = V2FactorioConsoleCommandPermissionsGroupPlayerDeleteErrors[keyof V2FactorioConsoleCommandPermissionsGroupPlayerDeleteErrors];

export type V2FactorioConsoleCommandPermissionsGroupPlayerDeleteResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandPermissionsRemovePlayerGroupResponse;
};

export type V2FactorioConsoleCommandPermissionsGroupPlayerDeleteResponse = V2FactorioConsoleCommandPermissionsGroupPlayerDeleteResponses[keyof V2FactorioConsoleCommandPermissionsGroupPlayerDeleteResponses];

export type V2FactorioConsoleCommandPermissionsGroupPlayerPostData = {
    body: Factorioapiv2CommandPermissionsAddPlayerRequest;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/permissions/group/player';
};

export type V2FactorioConsoleCommandPermissionsGroupPlayerPostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandPermissionsGroupPlayerPostError = V2FactorioConsoleCommandPermissionsGroupPlayerPostErrors[keyof V2FactorioConsoleCommandPermissionsGroupPlayerPostErrors];

export type V2FactorioConsoleCommandPermissionsGroupPlayerPostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandPermissionsAddPlayerResponse;
};

export type V2FactorioConsoleCommandPermissionsGroupPlayerPostResponse = V2FactorioConsoleCommandPermissionsGroupPlayerPostResponses[keyof V2FactorioConsoleCommandPermissionsGroupPlayerPostResponses];

export type V2FactorioConsoleCommandPermissionsGroupPlayersGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The username to get the groups for.
         */
        username?: string;
    };
    url: '/api/v2/factorio/console/command/permissions/group/players';
};

export type V2FactorioConsoleCommandPermissionsGroupPlayersGetErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandPermissionsGroupPlayersGetError = V2FactorioConsoleCommandPermissionsGroupPlayersGetErrors[keyof V2FactorioConsoleCommandPermissionsGroupPlayersGetErrors];

export type V2FactorioConsoleCommandPermissionsGroupPlayersGetResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandPermissionsGetPlayerGroupResponse;
};

export type V2FactorioConsoleCommandPermissionsGroupPlayersGetResponse = V2FactorioConsoleCommandPermissionsGroupPlayersGetResponses[keyof V2FactorioConsoleCommandPermissionsGroupPlayersGetResponses];

export type V2FactorioConsoleCommandPlayersGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/players';
};

export type V2FactorioConsoleCommandPlayersGetErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandPlayersGetError = V2FactorioConsoleCommandPlayersGetErrors[keyof V2FactorioConsoleCommandPlayersGetErrors];

export type V2FactorioConsoleCommandPlayersGetResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandPlayersResponse;
};

export type V2FactorioConsoleCommandPlayersGetResponse = V2FactorioConsoleCommandPlayersGetResponses[keyof V2FactorioConsoleCommandPlayersGetResponses];

export type V2FactorioConsoleCommandPromotePostData = {
    body: Factorioapiv2CommandPromoteRequest;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/promote';
};

export type V2FactorioConsoleCommandPromotePostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandPromotePostError = V2FactorioConsoleCommandPromotePostErrors[keyof V2FactorioConsoleCommandPromotePostErrors];

export type V2FactorioConsoleCommandPromotePostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandPromoteResponse;
};

export type V2FactorioConsoleCommandPromotePostResponse = V2FactorioConsoleCommandPromotePostResponses[keyof V2FactorioConsoleCommandPromotePostResponses];

export type V2FactorioConsoleCommandPurgePostData = {
    body: Factorioapiv2CommandPurgeRequest;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/purge';
};

export type V2FactorioConsoleCommandPurgePostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandPurgePostError = V2FactorioConsoleCommandPurgePostErrors[keyof V2FactorioConsoleCommandPurgePostErrors];

export type V2FactorioConsoleCommandPurgePostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandPurgeResponse;
};

export type V2FactorioConsoleCommandPurgePostResponse = V2FactorioConsoleCommandPurgePostResponses[keyof V2FactorioConsoleCommandPurgePostResponses];

export type V2FactorioConsoleCommandRawPostData = {
    body: Factorioapiv2CommandRawRequest;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/raw';
};

export type V2FactorioConsoleCommandRawPostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandRawPostError = V2FactorioConsoleCommandRawPostErrors[keyof V2FactorioConsoleCommandRawPostErrors];

export type V2FactorioConsoleCommandRawPostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandRawResponse;
};

export type V2FactorioConsoleCommandRawPostResponse = V2FactorioConsoleCommandRawPostResponses[keyof V2FactorioConsoleCommandRawPostResponses];

export type V2FactorioConsoleCommandResetTipsPostData = {
    body: Factorioapiv2CommandResetTipsRequest;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/reset-tips';
};

export type V2FactorioConsoleCommandResetTipsPostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandResetTipsPostError = V2FactorioConsoleCommandResetTipsPostErrors[keyof V2FactorioConsoleCommandResetTipsPostErrors];

export type V2FactorioConsoleCommandResetTipsPostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandResetTipsResponse;
};

export type V2FactorioConsoleCommandResetTipsPostResponse = V2FactorioConsoleCommandResetTipsPostResponses[keyof V2FactorioConsoleCommandResetTipsPostResponses];

export type V2FactorioConsoleCommandSeedGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/seed';
};

export type V2FactorioConsoleCommandSeedGetErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandSeedGetError = V2FactorioConsoleCommandSeedGetErrors[keyof V2FactorioConsoleCommandSeedGetErrors];

export type V2FactorioConsoleCommandSeedGetResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandSeedResponse;
};

export type V2FactorioConsoleCommandSeedGetResponse = V2FactorioConsoleCommandSeedGetResponses[keyof V2FactorioConsoleCommandSeedGetResponses];

export type V2FactorioConsoleCommandServerSavePostData = {
    body: Factorioapiv2CommandServerSaveRequest;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/server-save';
};

export type V2FactorioConsoleCommandServerSavePostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandServerSavePostError = V2FactorioConsoleCommandServerSavePostErrors[keyof V2FactorioConsoleCommandServerSavePostErrors];

export type V2FactorioConsoleCommandServerSavePostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandServerSaveResponse;
};

export type V2FactorioConsoleCommandServerSavePostResponse = V2FactorioConsoleCommandServerSavePostResponses[keyof V2FactorioConsoleCommandServerSavePostResponses];

export type V2FactorioConsoleCommandTimeGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/time';
};

export type V2FactorioConsoleCommandTimeGetErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandTimeGetError = V2FactorioConsoleCommandTimeGetErrors[keyof V2FactorioConsoleCommandTimeGetErrors];

export type V2FactorioConsoleCommandTimeGetResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandTimeResponse;
};

export type V2FactorioConsoleCommandTimeGetResponse = V2FactorioConsoleCommandTimeGetResponses[keyof V2FactorioConsoleCommandTimeGetResponses];

export type V2FactorioConsoleCommandToggleActionLoggingPostData = {
    body: Factorioapiv2CommandToggleActionLoggingRequest;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/toggle-action-logging';
};

export type V2FactorioConsoleCommandToggleActionLoggingPostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandToggleActionLoggingPostError = V2FactorioConsoleCommandToggleActionLoggingPostErrors[keyof V2FactorioConsoleCommandToggleActionLoggingPostErrors];

export type V2FactorioConsoleCommandToggleActionLoggingPostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandToggleActionLoggingResponse;
};

export type V2FactorioConsoleCommandToggleActionLoggingPostResponse = V2FactorioConsoleCommandToggleActionLoggingPostResponses[keyof V2FactorioConsoleCommandToggleActionLoggingPostResponses];

export type V2FactorioConsoleCommandToggleHeavyModePostData = {
    body: Factorioapiv2CommandToggleHeavyModeRequest;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/toggle-heavy-mode';
};

export type V2FactorioConsoleCommandToggleHeavyModePostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandToggleHeavyModePostError = V2FactorioConsoleCommandToggleHeavyModePostErrors[keyof V2FactorioConsoleCommandToggleHeavyModePostErrors];

export type V2FactorioConsoleCommandToggleHeavyModePostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandToggleHeavyModeResponse;
};

export type V2FactorioConsoleCommandToggleHeavyModePostResponse = V2FactorioConsoleCommandToggleHeavyModePostResponses[keyof V2FactorioConsoleCommandToggleHeavyModePostResponses];

export type V2FactorioConsoleCommandUnbanPostData = {
    body: Factorioapiv2CommandUnbanRequest;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/unban';
};

export type V2FactorioConsoleCommandUnbanPostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandUnbanPostError = V2FactorioConsoleCommandUnbanPostErrors[keyof V2FactorioConsoleCommandUnbanPostErrors];

export type V2FactorioConsoleCommandUnbanPostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandUnbanResponse;
};

export type V2FactorioConsoleCommandUnbanPostResponse = V2FactorioConsoleCommandUnbanPostResponses[keyof V2FactorioConsoleCommandUnbanPostResponses];

export type V2FactorioConsoleCommandUnignorePostData = {
    body: Factorioapiv2CommandUnignoreRequest;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/unignore';
};

export type V2FactorioConsoleCommandUnignorePostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandUnignorePostError = V2FactorioConsoleCommandUnignorePostErrors[keyof V2FactorioConsoleCommandUnignorePostErrors];

export type V2FactorioConsoleCommandUnignorePostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandUnignoreResponse;
};

export type V2FactorioConsoleCommandUnignorePostResponse = V2FactorioConsoleCommandUnignorePostResponses[keyof V2FactorioConsoleCommandUnignorePostResponses];

export type V2FactorioConsoleCommandUnlockShortcutBarPostData = {
    body: Factorioapiv2CommandUnlockShortcutBarRequest;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/unlock-shortcut-bar';
};

export type V2FactorioConsoleCommandUnlockShortcutBarPostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandUnlockShortcutBarPostError = V2FactorioConsoleCommandUnlockShortcutBarPostErrors[keyof V2FactorioConsoleCommandUnlockShortcutBarPostErrors];

export type V2FactorioConsoleCommandUnlockShortcutBarPostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandUnlockShortcutBarResponse;
};

export type V2FactorioConsoleCommandUnlockShortcutBarPostResponse = V2FactorioConsoleCommandUnlockShortcutBarPostResponses[keyof V2FactorioConsoleCommandUnlockShortcutBarPostResponses];

export type V2FactorioConsoleCommandUnlockTipsPostData = {
    body: Factorioapiv2CommandUnlockTipsRequest;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/unlock-tips';
};

export type V2FactorioConsoleCommandUnlockTipsPostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandUnlockTipsPostError = V2FactorioConsoleCommandUnlockTipsPostErrors[keyof V2FactorioConsoleCommandUnlockTipsPostErrors];

export type V2FactorioConsoleCommandUnlockTipsPostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandUnlockTipsResponse;
};

export type V2FactorioConsoleCommandUnlockTipsPostResponse = V2FactorioConsoleCommandUnlockTipsPostResponses[keyof V2FactorioConsoleCommandUnlockTipsPostResponses];

export type V2FactorioConsoleCommandUnmutePostData = {
    body: Factorioapiv2CommandUnmuteRequest;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/unmute';
};

export type V2FactorioConsoleCommandUnmutePostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandUnmutePostError = V2FactorioConsoleCommandUnmutePostErrors[keyof V2FactorioConsoleCommandUnmutePostErrors];

export type V2FactorioConsoleCommandUnmutePostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandUnmuteResponse;
};

export type V2FactorioConsoleCommandUnmutePostResponse = V2FactorioConsoleCommandUnmutePostResponses[keyof V2FactorioConsoleCommandUnmutePostResponses];

export type V2FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostData = {
    body: Factorioapiv2CommandUnmuteProgrammableSpeakerForEveryoneRequest;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/unmute-programmable-speaker-for-everyone';
};

export type V2FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostError = V2FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostErrors[keyof V2FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostErrors];

export type V2FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandUnmuteProgrammableSpeakerForEveryoneResponse;
};

export type V2FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostResponse = V2FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostResponses[keyof V2FactorioConsoleCommandUnmuteProgrammableSpeakerForEveryonePostResponses];

export type V2FactorioConsoleCommandVersionGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/version';
};

export type V2FactorioConsoleCommandVersionGetErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandVersionGetError = V2FactorioConsoleCommandVersionGetErrors[keyof V2FactorioConsoleCommandVersionGetErrors];

export type V2FactorioConsoleCommandVersionGetResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandVersionResponse;
};

export type V2FactorioConsoleCommandVersionGetResponse = V2FactorioConsoleCommandVersionGetResponses[keyof V2FactorioConsoleCommandVersionGetResponses];

export type V2FactorioConsoleCommandWhisperPostData = {
    body: Factorioapiv2CommandWhisperRequest;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/whisper';
};

export type V2FactorioConsoleCommandWhisperPostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandWhisperPostError = V2FactorioConsoleCommandWhisperPostErrors[keyof V2FactorioConsoleCommandWhisperPostErrors];

export type V2FactorioConsoleCommandWhisperPostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandWhisperResponse;
};

export type V2FactorioConsoleCommandWhisperPostResponse = V2FactorioConsoleCommandWhisperPostResponses[keyof V2FactorioConsoleCommandWhisperPostResponses];

export type V2FactorioConsoleCommandWhitelistDeleteData = {
    body: Factorioapiv2CommandWhitelistClearRequest;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/whitelist';
};

export type V2FactorioConsoleCommandWhitelistDeleteErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandWhitelistDeleteError = V2FactorioConsoleCommandWhitelistDeleteErrors[keyof V2FactorioConsoleCommandWhitelistDeleteErrors];

export type V2FactorioConsoleCommandWhitelistDeleteResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandWhitelistClearResponse;
};

export type V2FactorioConsoleCommandWhitelistDeleteResponse = V2FactorioConsoleCommandWhitelistDeleteResponses[keyof V2FactorioConsoleCommandWhitelistDeleteResponses];

export type V2FactorioConsoleCommandWhitelistGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/whitelist';
};

export type V2FactorioConsoleCommandWhitelistGetErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandWhitelistGetError = V2FactorioConsoleCommandWhitelistGetErrors[keyof V2FactorioConsoleCommandWhitelistGetErrors];

export type V2FactorioConsoleCommandWhitelistGetResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandWhitelistGetResponse;
};

export type V2FactorioConsoleCommandWhitelistGetResponse = V2FactorioConsoleCommandWhitelistGetResponses[keyof V2FactorioConsoleCommandWhitelistGetResponses];

export type V2FactorioConsoleCommandWhitelistPatchData = {
    body: Factorioapiv2CommandWhitelistRemoveRequest;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/whitelist';
};

export type V2FactorioConsoleCommandWhitelistPatchErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandWhitelistPatchError = V2FactorioConsoleCommandWhitelistPatchErrors[keyof V2FactorioConsoleCommandWhitelistPatchErrors];

export type V2FactorioConsoleCommandWhitelistPatchResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandWhitelistRemoveResponse;
};

export type V2FactorioConsoleCommandWhitelistPatchResponse = V2FactorioConsoleCommandWhitelistPatchResponses[keyof V2FactorioConsoleCommandWhitelistPatchResponses];

export type V2FactorioConsoleCommandWhitelistPostData = {
    body: Factorioapiv2CommandWhitelistAddRequest;
    path?: never;
    query?: never;
    url: '/api/v2/factorio/console/command/whitelist';
};

export type V2FactorioConsoleCommandWhitelistPostErrors = {
    /**
     * Internal Server Error
     */
    500: JsonapiErrorObject;
    /**
     * Service Unavailable
     */
    503: JsonapiErrorObject;
};

export type V2FactorioConsoleCommandWhitelistPostError = V2FactorioConsoleCommandWhitelistPostErrors[keyof V2FactorioConsoleCommandWhitelistPostErrors];

export type V2FactorioConsoleCommandWhitelistPostResponses = {
    /**
     * A successful response.
     */
    200: Factorioapiv2CommandWhitelistAddResponse;
};

export type V2FactorioConsoleCommandWhitelistPostResponse = V2FactorioConsoleCommandWhitelistPostResponses[keyof V2FactorioConsoleCommandWhitelistPostResponses];